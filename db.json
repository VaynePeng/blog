{"meta":{"version":1,"warehouse":"4.0.2"},"models":{"Asset":[{"_id":"source/favicon.ico","path":"favicon.ico","modified":0,"renderable":0},{"_id":"themes/chic/source/favicon.ico","path":"favicon.ico","modified":0,"renderable":1},{"_id":"themes/chic/source/css/base.styl","path":"css/base.styl","modified":0,"renderable":1},{"_id":"themes/chic/source/css/custom.styl","path":"css/custom.styl","modified":0,"renderable":1},{"_id":"themes/chic/source/css/font.styl","path":"css/font.styl","modified":0,"renderable":1},{"_id":"themes/chic/source/css/layout.styl","path":"css/layout.styl","modified":0,"renderable":1},{"_id":"themes/chic/source/css/media.styl","path":"css/media.styl","modified":0,"renderable":1},{"_id":"themes/chic/source/css/normalize.styl","path":"css/normalize.styl","modified":0,"renderable":1},{"_id":"themes/chic/source/css/style.styl","path":"css/style.styl","modified":0,"renderable":1},{"_id":"themes/chic/source/css/variable.styl","path":"css/variable.styl","modified":0,"renderable":1},{"_id":"themes/chic/source/js/mathjax2.7.5.js","path":"js/mathjax2.7.5.js","modified":0,"renderable":1},{"_id":"themes/chic/source/js/script.js","path":"js/script.js","modified":0,"renderable":1},{"_id":"themes/chic/source/js/tocbot.min.js","path":"js/tocbot.min.js","modified":0,"renderable":1},{"_id":"themes/chic/source/fonts/iconfont/demo.css","path":"fonts/iconfont/demo.css","modified":0,"renderable":1},{"_id":"themes/chic/source/fonts/iconfont/demo_index.html","path":"fonts/iconfont/demo_index.html","modified":0,"renderable":1},{"_id":"themes/chic/source/fonts/iconfont/iconfont.css","path":"fonts/iconfont/iconfont.css","modified":0,"renderable":1},{"_id":"themes/chic/source/fonts/iconfont/iconfont.eot","path":"fonts/iconfont/iconfont.eot","modified":0,"renderable":1},{"_id":"themes/chic/source/fonts/iconfont/iconfont.js","path":"fonts/iconfont/iconfont.js","modified":0,"renderable":1},{"_id":"themes/chic/source/fonts/iconfont/iconfont.json","path":"fonts/iconfont/iconfont.json","modified":0,"renderable":1},{"_id":"themes/chic/source/fonts/iconfont/iconfont.svg","path":"fonts/iconfont/iconfont.svg","modified":0,"renderable":1},{"_id":"themes/chic/source/fonts/iconfont/iconfont.ttf","path":"fonts/iconfont/iconfont.ttf","modified":0,"renderable":1},{"_id":"themes/chic/source/fonts/iconfont/iconfont.woff","path":"fonts/iconfont/iconfont.woff","modified":0,"renderable":1},{"_id":"themes/chic/source/fonts/iconfont/iconfont.woff2","path":"fonts/iconfont/iconfont.woff2","modified":0,"renderable":1},{"_id":"themes/chic/source/fonts/lanting/lanting.TTF","path":"fonts/lanting/lanting.TTF","modified":0,"renderable":1},{"_id":"themes/chic/source/fonts/lanting/lanting.eot","path":"fonts/lanting/lanting.eot","modified":0,"renderable":1},{"_id":"themes/chic/source/fonts/lanting/lanting.otf","path":"fonts/lanting/lanting.otf","modified":0,"renderable":1},{"_id":"themes/chic/source/fonts/lanting/lanting.woff","path":"fonts/lanting/lanting.woff","modified":0,"renderable":1},{"_id":"themes/chic/source/fonts/lanting/lanting.woff2","path":"fonts/lanting/lanting.woff2","modified":0,"renderable":1},{"_id":"themes/chic/source/image/avatar.jpg","path":"image/avatar.jpg","modified":0,"renderable":1},{"_id":"themes/chic/source/fonts/lanting/SmileySans-Oblique.otf","path":"fonts/lanting/SmileySans-Oblique.otf","modified":0,"renderable":1},{"_id":"themes/chic/source/fonts/lanting/SmileySans-Oblique.otf.woff2","path":"fonts/lanting/SmileySans-Oblique.otf.woff2","modified":0,"renderable":1},{"_id":"themes/chic/source/fonts/lanting/SmileySans-Oblique.ttf","path":"fonts/lanting/SmileySans-Oblique.ttf","modified":0,"renderable":1},{"_id":"themes/chic/source/fonts/lanting/SmileySans-Oblique.ttf.woff2","path":"fonts/lanting/SmileySans-Oblique.ttf.woff2","modified":0,"renderable":1},{"_id":"themes/chic/source/fonts/arial/Arial.ttf","path":"fonts/arial/Arial.ttf","modified":0,"renderable":1},{"_id":"themes/chic/source/fonts/arial/Arial.woff","path":"fonts/arial/Arial.woff","modified":0,"renderable":1}],"Cache":[{"_id":"source/_posts/hello-world.md","hash":"94d6234ee638e5256e748af2d5b9b56ee37097a5","modified":1666783140632},{"_id":"themes/landscape/.npmignore","hash":"58d26d4b5f2f94c2d02a4e4a448088e4a2527c77","modified":1666259546882},{"_id":"themes/landscape/Gruntfile.js","hash":"71adaeaac1f3cc56e36c49d549b8d8a72235c9b9","modified":1666259547370},{"_id":"themes/landscape/LICENSE","hash":"c480fce396b23997ee23cc535518ffaaf7f458f8","modified":1666259547022},{"_id":"themes/landscape/README.md","hash":"37fae88639ef60d63bd0de22314d7cc4c5d94b07","modified":1666259547450},{"_id":"themes/landscape/_config.yml","hash":"6191aa439957c86256afe34cdc7624845833bf86","modified":1666262307611},{"_id":"themes/landscape/package.json","hash":"544f21a0b2c7034998b36ae94dba6e3e0f39f228","modified":1666259547435},{"_id":"themes/landscape/languages/de.yml","hash":"3ebf0775abbee928c8d7bda943c191d166ded0d3","modified":1666259547550},{"_id":"themes/landscape/languages/default.yml","hash":"3083f319b352d21d80fc5e20113ddf27889c9d11","modified":1666259547552},{"_id":"themes/landscape/languages/es.yml","hash":"76edb1171b86532ef12cfd15f5f2c1ac3949f061","modified":1666259547556},{"_id":"themes/landscape/languages/fr.yml","hash":"415e1c580ced8e4ce20b3b0aeedc3610341c76fb","modified":1666259547557},{"_id":"themes/landscape/languages/ja.yml","hash":"a73e1b9c80fd6e930e2628b393bfe3fb716a21a9","modified":1666259547559},{"_id":"themes/landscape/languages/ko.yml","hash":"881d6a0a101706e0452af81c580218e0bfddd9cf","modified":1666259547561},{"_id":"themes/landscape/languages/nl.yml","hash":"12ed59faba1fc4e8cdd1d42ab55ef518dde8039c","modified":1666259547564},{"_id":"themes/landscape/languages/no.yml","hash":"965a171e70347215ec726952e63f5b47930931ef","modified":1666259547565},{"_id":"themes/landscape/languages/pt.yml","hash":"57d07b75d434fbfc33b0ddb543021cb5f53318a8","modified":1666259547567},{"_id":"themes/landscape/languages/ru.yml","hash":"4fda301bbd8b39f2c714e2c934eccc4b27c0a2b0","modified":1666259547569},{"_id":"themes/landscape/languages/zh-CN.yml","hash":"ca40697097ab0b3672a80b455d3f4081292d1eed","modified":1666259547570},{"_id":"themes/landscape/languages/zh-TW.yml","hash":"53ce3000c5f767759c7d2c4efcaa9049788599c3","modified":1666259547576},{"_id":"themes/landscape/layout/archive.ejs","hash":"2703b07cc8ac64ae46d1d263f4653013c7e1666b","modified":1666259547193},{"_id":"themes/landscape/layout/category.ejs","hash":"765426a9c8236828dc34759e604cc2c52292835a","modified":1666259547214},{"_id":"themes/landscape/layout/index.ejs","hash":"aa1b4456907bdb43e629be3931547e2d29ac58c8","modified":1666259547254},{"_id":"themes/landscape/layout/layout.ejs","hash":"f155824ca6130080bb057fa3e868a743c69c4cf5","modified":1666259547257},{"_id":"themes/landscape/layout/page.ejs","hash":"7d80e4e36b14d30a7cd2ac1f61376d9ebf264e8b","modified":1666259547269},{"_id":"themes/landscape/layout/post.ejs","hash":"7d80e4e36b14d30a7cd2ac1f61376d9ebf264e8b","modified":1666259547272},{"_id":"themes/landscape/layout/tag.ejs","hash":"eaa7b4ccb2ca7befb90142e4e68995fb1ea68b2e","modified":1666259547290},{"_id":"themes/landscape/scripts/fancybox.js","hash":"aa411cd072399df1ddc8e2181a3204678a5177d9","modified":1666259547363},{"_id":"themes/landscape/layout/_partial/after-footer.ejs","hash":"d0d753d39038284d52b10e5075979cc97db9cd20","modified":1666259547138},{"_id":"themes/landscape/layout/_partial/archive-post.ejs","hash":"c7a71425a946d05414c069ec91811b5c09a92c47","modified":1666259547155},{"_id":"themes/landscape/layout/_partial/archive.ejs","hash":"950ddd91db8718153b329b96dc14439ab8463ba5","modified":1666259547175},{"_id":"themes/landscape/layout/_partial/article.ejs","hash":"c4c835615d96a950d51fa2c3b5d64d0596534fed","modified":1666259547197},{"_id":"themes/landscape/layout/_partial/footer.ejs","hash":"93518893cf91287e797ebac543c560e2a63b8d0e","modified":1666259547226},{"_id":"themes/landscape/layout/_partial/gauges-analytics.ejs","hash":"aad6312ac197d6c5aaf2104ac863d7eba46b772a","modified":1666259547236},{"_id":"themes/landscape/layout/_partial/google-analytics.ejs","hash":"f921e7f9223d7c95165e0f835f353b2938e40c45","modified":1666259547239},{"_id":"themes/landscape/layout/_partial/header.ejs","hash":"7e749050be126eadbc42decfbea75124ae430413","modified":1666259547246},{"_id":"themes/landscape/layout/_partial/head.ejs","hash":"5abf77aec957d9445fc71a8310252f0013c84578","modified":1666259547242},{"_id":"themes/landscape/layout/_partial/mobile-nav.ejs","hash":"e952a532dfc583930a666b9d4479c32d4a84b44e","modified":1666259547260},{"_id":"themes/landscape/layout/_partial/sidebar.ejs","hash":"930da35cc2d447a92e5ee8f835735e6fd2232469","modified":1666259547278},{"_id":"themes/landscape/layout/_widget/archive.ejs","hash":"beb4a86fcc82a9bdda9289b59db5a1988918bec3","modified":1666259547188},{"_id":"themes/landscape/layout/_widget/category.ejs","hash":"dd1e5af3c6af3f5d6c85dfd5ca1766faed6a0b05","modified":1666259547209},{"_id":"themes/landscape/layout/_widget/recent_posts.ejs","hash":"0d4f064733f8b9e45c0ce131fe4a689d570c883a","modified":1666259547274},{"_id":"themes/landscape/layout/_widget/tag.ejs","hash":"2de380865df9ab5f577f7d3bcadf44261eb5faae","modified":1666259547287},{"_id":"themes/landscape/source/css/_extend.styl","hash":"222fbe6d222531d61c1ef0f868c90f747b1c2ced","modified":1666259547477},{"_id":"themes/landscape/layout/_widget/tagcloud.ejs","hash":"b4a2079101643f63993dcdb32925c9b071763b46","modified":1666259547292},{"_id":"themes/landscape/source/css/_variables.styl","hash":"628e307579ea46b5928424313993f17b8d729e92","modified":1666259547480},{"_id":"themes/landscape/source/css/style.styl","hash":"a70d9c44dac348d742702f6ba87e5bb3084d65db","modified":1666259547514},{"_id":"themes/landscape/source/js/script.js","hash":"2876e0b19ce557fca38d7c6f49ca55922ab666a1","modified":1666259547427},{"_id":"themes/landscape/source/fancybox/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1666259547310},{"_id":"themes/landscape/source/fancybox/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1666259547317},{"_id":"themes/landscape/source/fancybox/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1666259547323},{"_id":"themes/landscape/source/fancybox/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1666259547466},{"_id":"themes/landscape/source/fancybox/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1666259547473},{"_id":"themes/landscape/source/fancybox/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1666259547470},{"_id":"themes/landscape/source/fancybox/jquery.fancybox.css","hash":"aaa582fb9eb4b7092dc69fcb2d5b1c20cca58ab6","modified":1666259547119},{"_id":"themes/landscape/source/fancybox/jquery.fancybox.js","hash":"d08b03a42d5c4ba456ef8ba33116fdbb7a9cabed","modified":1666259547409},{"_id":"themes/landscape/source/fancybox/jquery.fancybox.pack.js","hash":"9e0d51ca1dbe66f6c0c7aefd552dc8122e694a6e","modified":1666259547422},{"_id":"themes/landscape/layout/_partial/post/date.ejs","hash":"6197802873157656e3077c5099a7dda3d3b01c29","modified":1666259547218},{"_id":"themes/landscape/layout/_partial/post/category.ejs","hash":"c6bcd0e04271ffca81da25bcff5adf3d46f02fc0","modified":1666259547204},{"_id":"themes/landscape/layout/_partial/post/gallery.ejs","hash":"3d9d81a3c693ff2378ef06ddb6810254e509de5b","modified":1666259547233},{"_id":"themes/landscape/layout/_partial/post/nav.ejs","hash":"16a904de7bceccbb36b4267565f2215704db2880","modified":1666259547265},{"_id":"themes/landscape/layout/_partial/post/tag.ejs","hash":"2fcb0bf9c8847a644167a27824c9bb19ac74dd14","modified":1666259547285},{"_id":"themes/landscape/layout/_partial/post/title.ejs","hash":"2f275739b6f1193c123646a5a31f37d48644c667","modified":1666259547294},{"_id":"themes/landscape/source/css/_partial/archive.styl","hash":"db15f5677dc68f1730e82190bab69c24611ca292","modified":1666259547484},{"_id":"themes/landscape/source/css/_partial/article.styl","hash":"10685f8787a79f79c9a26c2f943253450c498e3e","modified":1666259547487},{"_id":"themes/landscape/source/css/_partial/comment.styl","hash":"79d280d8d203abb3bd933ca9b8e38c78ec684987","modified":1666259547489},{"_id":"themes/landscape/source/css/_partial/footer.styl","hash":"e35a060b8512031048919709a8e7b1ec0e40bc1b","modified":1666259547491},{"_id":"themes/landscape/source/css/_partial/header.styl","hash":"85ab11e082f4dd86dde72bed653d57ec5381f30c","modified":1666259547498},{"_id":"themes/landscape/source/css/_partial/highlight.styl","hash":"bf4e7be1968dad495b04e83c95eac14c4d0ad7c0","modified":1666259547500},{"_id":"themes/landscape/source/css/_partial/mobile.styl","hash":"a399cf9e1e1cec3e4269066e2948d7ae5854d745","modified":1666259547504},{"_id":"themes/landscape/source/css/_partial/sidebar-aside.styl","hash":"890349df5145abf46ce7712010c89237900b3713","modified":1666259547506},{"_id":"themes/landscape/source/css/_partial/sidebar-bottom.styl","hash":"8fd4f30d319542babfd31f087ddbac550f000a8a","modified":1666259547508},{"_id":"themes/landscape/source/css/_partial/sidebar.styl","hash":"404ec059dc674a48b9ab89cd83f258dec4dcb24d","modified":1666259547510},{"_id":"themes/landscape/source/css/_util/grid.styl","hash":"0bf55ee5d09f193e249083602ac5fcdb1e571aed","modified":1666259547495},{"_id":"themes/landscape/source/css/_util/mixin.styl","hash":"44f32767d9fd3c1c08a60d91f181ee53c8f0dbb3","modified":1666259547502},{"_id":"themes/landscape/source/css/fonts/FontAwesome.otf","hash":"b5b4f9be85f91f10799e87a083da1d050f842734","modified":1666259547460},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.eot","hash":"7619748fe34c64fb157a57f6d4ef3678f63a8f5e","modified":1666259547304},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.woff","hash":"04c3bf56d87a0828935bd6b4aee859995f321693","modified":1666259547539},{"_id":"themes/landscape/source/fancybox/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1666259547464},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-buttons.css","hash":"1a9d8e5c22b371fcc69d4dbbb823d9c39f04c0c8","modified":1666259547080},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-buttons.js","hash":"dc3645529a4bf72983a39fa34c1eb9146e082019","modified":1666259547399},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-media.js","hash":"294420f9ff20f4e3584d212b0c262a00a96ecdb3","modified":1666259547402},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-thumbs.css","hash":"4ac329c16a5277592fc12a37cca3d72ca4ec292f","modified":1666259547089},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-thumbs.js","hash":"47da1ae5401c24b5c17cc18e2730780f5c1a7a0c","modified":1666259547405},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.ttf","hash":"7f09c97f333917034ad08fa7295e916c9f72fd3f","modified":1666259547535},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.svg","hash":"46fcc0194d75a0ddac0a038aee41b23456784814","modified":1666259547529},{"_id":"themes/landscape/source/css/images/banner.jpg","hash":"f44aa591089fcb3ec79770a1e102fd3289a7c6a6","modified":1666259547352},{"_id":"source/favicon.ico","hash":"f1a28807bbd587b99a0c67ddb171df4a7f88383f","modified":1666804377009},{"_id":"themes/zhaoo/.gitignore","hash":"7d65523f2a5afb69d76824dd1dfa62a34faa3197","modified":1666276245484},{"_id":"themes/zhaoo/LICENSE","hash":"74f4b502cb5e62d3c947bc4fd16bed695d8bf65b","modified":1666276245485},{"_id":"themes/zhaoo/README.md","hash":"76f4f1638f2081a4302a46480ae55b9f9bfa66c7","modified":1666276245485},{"_id":"themes/zhaoo/README_EN.md","hash":"314020a732385d5184921e7b3d7583edaabf95ee","modified":1666276245487},{"_id":"themes/zhaoo/_config.yml","hash":"7593d452e919ce17934d1b2815536dc814e59479","modified":1666693142204},{"_id":"themes/zhaoo/package.json","hash":"e116101e90a6eefdbbf423f7a4d0edd72221cf17","modified":1666276245544},{"_id":"themes/zhaoo/languages/default.yml","hash":"1b2b75ca9ff3bfeddb596239889b584cdfcecc32","modified":1666276245503},{"_id":"themes/zhaoo/languages/fr.yml","hash":"84ab164b37c6abf625473e9a0c18f6f815dd5fd9","modified":1666276245504},{"_id":"themes/zhaoo/languages/it.yml","hash":"6ae71000ed039f56572143ffe90da17b95d1a66f","modified":1666276245505},{"_id":"themes/zhaoo/languages/nl.yml","hash":"12ed59faba1fc4e8cdd1d42ab55ef518dde8039c","modified":1666276245506},{"_id":"themes/zhaoo/languages/no.yml","hash":"965a171e70347215ec726952e63f5b47930931ef","modified":1666276245506},{"_id":"themes/zhaoo/languages/ru.yml","hash":"4fda301bbd8b39f2c714e2c934eccc4b27c0a2b0","modified":1666276245507},{"_id":"themes/zhaoo/languages/zh-CN.yml","hash":"ccbba6315760755926f5abfe1b98c225a6650581","modified":1666276245508},{"_id":"themes/zhaoo/languages/zh-TW.yml","hash":"53ce3000c5f767759c7d2c4efcaa9049788599c3","modified":1666276245508},{"_id":"themes/zhaoo/layout/archive.ejs","hash":"438069ea52e71a9fd8c96ff58007ec6c91e352a7","modified":1666276245536},{"_id":"themes/zhaoo/layout/categories.ejs","hash":"e7ed9fa6a6abd02af212a8bf04fc600d008f4abd","modified":1666276245537},{"_id":"themes/zhaoo/layout/category.ejs","hash":"ca4af3683e3d3daf9282c76b0749c2b1a89399ac","modified":1666276245537},{"_id":"themes/zhaoo/layout/galleries.ejs","hash":"65f1bad4c0410c92087f72e2d9298f30f23e4d18","modified":1666276245538},{"_id":"themes/zhaoo/layout/gallery.ejs","hash":"a379c8607ae2fdd450198e437ba8125ac1435654","modified":1666276245539},{"_id":"themes/zhaoo/layout/index.ejs","hash":"0e6282054062e1391be29bb473487a808f13828c","modified":1666276245539},{"_id":"themes/zhaoo/layout/layout.ejs","hash":"4b559e7859d72d3e962b18198cbb30ec126c84b5","modified":1666276245540},{"_id":"themes/zhaoo/layout/post.ejs","hash":"747038a8b2d33bce35b2f68d3e50bdfa28c4f36c","modified":1666276245541},{"_id":"themes/zhaoo/layout/pure.ejs","hash":"1ffc46cb8d2a976a329bd6e8292ca8114467f833","modified":1666276245542},{"_id":"themes/zhaoo/layout/tag.ejs","hash":"91a8ffd62866427d6e04884fc4fc806b8c261770","modified":1666276245542},{"_id":"themes/zhaoo/layout/tags.ejs","hash":"937f6400f7b47baa4aca025786dcd67151355cc1","modified":1666276245543},{"_id":"themes/zhaoo/scripts/caption.js","hash":"651928cc462943be90036c33262d3d25aa3e7ea0","modified":1666276245569},{"_id":"themes/zhaoo/scripts/carrier.js","hash":"10c3cde9ec17e1ced6ad871e7f5af409cbc51e6e","modified":1666276245570},{"_id":"themes/zhaoo/scripts/lazyload.js","hash":"ccf0c3d84fc2edf085c43e204410cf4d3c6b2baa","modified":1666276245572},{"_id":"themes/zhaoo/scripts/entry.js","hash":"c0c69f1c184c7a2e29dbaaa45a93b8948c241932","modified":1666276245571},{"_id":"themes/zhaoo/scripts/merge-config.js","hash":"35aac2f51a883d4d7bbe2b3b273b47f4db670952","modified":1666276245572},{"_id":"themes/zhaoo/scripts/title.js","hash":"b62b21cd09717564ef883c901deb5451b3000dbd","modified":1666276245574},{"_id":"themes/zhaoo/scripts/post-image.js","hash":"82f5d9d5d9fe9d7de886d87fe20cea360d0df8d9","modified":1666276245573},{"_id":"themes/zhaoo/layout/_partial/head.ejs","hash":"b81bbde79d21adaef2023e9e1f0807c9ffb5b59b","modified":1666276245521},{"_id":"themes/zhaoo/layout/_partial/script.ejs","hash":"b3d7c42d6ee99dfeed081cb5f788c58263c1eff0","modified":1666276245535},{"_id":"themes/zhaoo/source/css/style.styl","hash":"91077c8a71c5827bdc5875309e3837e48a290ffd","modified":1666276245598},{"_id":"themes/zhaoo/source/js/color-mode.js","hash":"33cd307624e32035ea4544c9a6a4676ef9f70beb","modified":1666276245617},{"_id":"themes/zhaoo/_example/source/_data/galleries.json","hash":"2b8bd59e5dbda5512b6a7458b2d3936e7ae23c5a","modified":1666276245490},{"_id":"themes/zhaoo/source/js/script.js","hash":"a36c745bdb1fcb58bcb4774159bba7653a0499ba","modified":1666276245618},{"_id":"themes/zhaoo/source/js/utils.js","hash":"359461693c5a1c8f9fb159c2dfb78051d0b351e1","modified":1666276245618},{"_id":"themes/zhaoo/_example/source/_data/local_images.json","hash":"9a5ba1814709361cd141121e803f8953ef32d7fb","modified":1666276245491},{"_id":"themes/zhaoo/_example/source/_posts/hexo-theme-zhaoo.md","hash":"b52814eaf58dca925001beb2f911bb5e377e69a9","modified":1666276245493},{"_id":"themes/zhaoo/_example/source/_posts/hexo-theme-zhaoo-doc.md","hash":"6855f6440f4cdac0540afbd4900f9ab2175a0d5a","modified":1666276245492},{"_id":"themes/zhaoo/_example/source/about/index.md","hash":"e9cf4e1b773da337befbacca42eeffc5f76e2ad5","modified":1666276245495},{"_id":"themes/zhaoo/_example/source/categories/index.md","hash":"108d69d9b70c1b66531b8de5e89d809f9fad26a6","modified":1666276245496},{"_id":"themes/zhaoo/_example/source/galleries/index.md","hash":"83876d965236601bc871f6619f7d1f6e1357c945","modified":1666276245499},{"_id":"themes/zhaoo/_example/source/tags/index.md","hash":"176a9920c6ed25f1f2d12940b7733da45b0966d4","modified":1666276245502},{"_id":"themes/zhaoo/layout/_partial/comments/changyan.ejs","hash":"d762068b8c036ae7e83a2df9d36cd43dca46d5a4","modified":1666276245511},{"_id":"themes/zhaoo/layout/_partial/comments/gitalk.ejs","hash":"8748a63003dc954df1b0a47f3d45ff191e714f3d","modified":1666276245512},{"_id":"themes/zhaoo/layout/_partial/comments/valine.ejs","hash":"8f6ce8eb608f0c7c9ce482fd1f8aad7efa175f8c","modified":1666276245513},{"_id":"themes/zhaoo/layout/_partial/components/fab.ejs","hash":"f6c0ed0c4a5b3a435605c7e956da143e66993e00","modified":1666276245514},{"_id":"themes/zhaoo/layout/_partial/components/footer.ejs","hash":"59dab61fa47add0fa174e49507659eb2e18d4de8","modified":1666276245515},{"_id":"themes/zhaoo/layout/_partial/components/header.ejs","hash":"62ae2fac8dc5d6cba29ebe777b9d06e6d954a45b","modified":1666276245516},{"_id":"themes/zhaoo/layout/_partial/components/loading.ejs","hash":"1e1d68be27d3120864daf2d7305ac7a62bca1d84","modified":1666276245517},{"_id":"themes/zhaoo/layout/_partial/components/menu.ejs","hash":"c4106f65b24355895399ebae328bc8bb8f622d6a","modified":1666276245517},{"_id":"themes/zhaoo/layout/_partial/components/navbar.ejs","hash":"d6886ca04c922bd32068ae3540a75463bdf42a99","modified":1666276245518},{"_id":"themes/zhaoo/layout/_partial/components/paginator.ejs","hash":"174723904a7a0b6088c411233266a5d35b8affe7","modified":1666276245519},{"_id":"themes/zhaoo/layout/_partial/components/scrollbar.ejs","hash":"dabbb31935dd1e67bf735665b35d41db8eee67c6","modified":1666276245520},{"_id":"themes/zhaoo/layout/_partial/components/search.ejs","hash":"3e2f18d6b785cee85667655f1d27e9858447a3d8","modified":1666276245521},{"_id":"themes/zhaoo/layout/_partial/index/item.ejs","hash":"af1e72bc4e9216783e924c94b626ed32dad7616c","modified":1666276245522},{"_id":"themes/zhaoo/layout/_partial/index/post.ejs","hash":"4de44a27558cf1058a5fe2bb65fb2e27f593af76","modified":1666276245523},{"_id":"themes/zhaoo/layout/_partial/index/preview.ejs","hash":"fc78346e7a00d1584fe8b0dc1b229a481c7a056a","modified":1666276245524},{"_id":"themes/zhaoo/layout/_partial/plugins/analytics.ejs","hash":"367d6fb80be4ce480c78bf63f2fbd2d28dedd0a3","modified":1666276245525},{"_id":"themes/zhaoo/layout/_partial/plugins/daovoice.ejs","hash":"f49d99f040979c44b7abad5136786c2535a8db46","modified":1666276245526},{"_id":"themes/zhaoo/layout/_partial/plugins/leancloud.ejs","hash":"535708a3276ed989f63321e13d889863d1bd6d8f","modified":1666276245527},{"_id":"themes/zhaoo/layout/_partial/post/article.ejs","hash":"21cb86efd40a44f9c63c496cfaa7c3b973d29254","modified":1666276245529},{"_id":"themes/zhaoo/layout/_partial/plugins/seo.ejs","hash":"7aa361277db60df8195b651fdfbc95ec5f5a4daa","modified":1666276245528},{"_id":"themes/zhaoo/layout/_partial/post/comments.ejs","hash":"505e0724ccf8aa467e219e9f1fc86ca62479ec18","modified":1666276245530},{"_id":"themes/zhaoo/layout/_partial/post/copyright.ejs","hash":"3c16a6499867c7fb773505ea2d877b3bbfdf81b0","modified":1666276245531},{"_id":"themes/zhaoo/layout/_partial/post/head.ejs","hash":"9ab6fe00a2b1a03cfcbe3125cf91c52908afb528","modified":1666276245532},{"_id":"themes/zhaoo/layout/_partial/post/donate.ejs","hash":"e64e1a6e537ea56888baf9be98324baa9c39b49f","modified":1666276245531},{"_id":"themes/zhaoo/layout/_partial/post/nav.ejs","hash":"9a59b60fdba3100d91c9f527bae75ac0e9cb8bd5","modified":1666276245533},{"_id":"themes/zhaoo/layout/_partial/post/tag.ejs","hash":"6b94a9ccb03624e6ce7cbbc827e45bc4bfca8a4a","modified":1666276245534},{"_id":"themes/zhaoo/layout/_partial/post/toc.ejs","hash":"bbb947334a5275cee6b834b5c216ddc6699d68c7","modified":1666276245534},{"_id":"themes/zhaoo/source/css/_base/color-mode.styl","hash":"be52bfac7dd56ce6c76039ea1522cc30c9e815a2","modified":1666276245576},{"_id":"themes/zhaoo/source/css/_base/reset.styl","hash":"be64ad3469e427e9b7000e763034fb94984a8eeb","modified":1666276245577},{"_id":"themes/zhaoo/source/css/_base/zui.styl","hash":"84c080d668427a3a64b8c930333c714783730414","modified":1666276245578},{"_id":"themes/zhaoo/source/css/_components/common.styl","hash":"dc725d10a7a161654e498875d3a507ffe18dba7e","modified":1666276245579},{"_id":"themes/zhaoo/source/css/_components/fab.styl","hash":"184933f6ee13a7a7f40b2592fc35ba0a9c2a5825","modified":1666276245580},{"_id":"themes/zhaoo/source/css/_components/footer.styl","hash":"06a0f3acc8947842889e06986025169063c72eac","modified":1666276245581},{"_id":"themes/zhaoo/source/css/_components/header.styl","hash":"d9286ca8729e35d3b29ca6cb27ec2ccae562c040","modified":1666276245581},{"_id":"themes/zhaoo/source/css/_components/navbar.styl","hash":"4e7fbb1c5fd25b280d88a70eec465de8ac0a4ab4","modified":1666276245583},{"_id":"themes/zhaoo/source/css/_components/menu.styl","hash":"46f897c3cb3fea7c409d179cdcca7a63dd82bcd4","modified":1666276245582},{"_id":"themes/zhaoo/source/css/_components/preview.styl","hash":"b5427785cfee20fcc400e55e964dab3312584726","modified":1666276245585},{"_id":"themes/zhaoo/source/css/_components/paginator.styl","hash":"bafe156fce40a01f2fa38bc2bbb38dc92239cabd","modified":1666276245584},{"_id":"themes/zhaoo/source/css/_components/scrollbar.styl","hash":"aca6a15c54cf34ddbf99075d0c13d458cfc11828","modified":1666276245585},{"_id":"themes/zhaoo/source/css/_components/search.styl","hash":"e9f96afd0947d83deda8cf6bfb938125a203b3d3","modified":1666276245586},{"_id":"themes/zhaoo/source/css/_pages/pages.styl","hash":"c4e4af922ee697c44295ab1072e350d4587b120f","modified":1666276245596},{"_id":"themes/zhaoo/source/css/_variables/variables.styl","hash":"e4fd51e16ba970994ebcc0b6dacdd82d22dbe6d7","modified":1666276245597},{"_id":"themes/zhaoo/source/images/icons/apple-touch-icon.png","hash":"c1d16404a57db24e985204e7b2b97fa45d5fea0b","modified":1666276245600},{"_id":"themes/zhaoo/source/images/icons/favicon-128x128.png","hash":"c92b96941e92baf607a75887b3e187c9517ae807","modified":1666276245601},{"_id":"themes/zhaoo/source/images/icons/favicon-144x144.png","hash":"e54f440ff564f1235f9c399e2cd435dd502ceb84","modified":1666276245602},{"_id":"themes/zhaoo/source/images/icons/favicon-16x16.png","hash":"86cc7a07ccf09deff3de7b0ef2f82daa282a8b8e","modified":1666276245603},{"_id":"themes/zhaoo/source/images/icons/favicon-32x32.png","hash":"7b095984bd7d07e10fa9b0df8347a933eba8537c","modified":1666276245603},{"_id":"themes/zhaoo/source/images/icons/zhaoo-logo.png","hash":"50f9f5de4207847bba6aecc4c21d21d79f0001fb","modified":1666276245607},{"_id":"themes/zhaoo/source/images/theme/loading.gif","hash":"db91090dd60098086993953f88c37a332eea70d7","modified":1666276245611},{"_id":"themes/zhaoo/source/lib/fancybox/fancybox.css","hash":"1be9b79be02a1cfc5d96c4a5e0feb8f472babd95","modified":1666276245625},{"_id":"themes/zhaoo/source/lib/highlight/a11y-dark.css","hash":"9f0c935216015dd88251a6c366bdd00abfe65982","modified":1666276245631},{"_id":"themes/zhaoo/source/lib/gitalk/gitalk.css","hash":"99f6725b386bdb0f52d15b0dd7877eaf1ad4c918","modified":1666276245628},{"_id":"themes/zhaoo/source/lib/gitalk/.DS_Store","hash":"d0c74f5f99535ad14eaec93484abb4ff8dbca277","modified":1666276245627},{"_id":"themes/zhaoo/source/lib/highlight/highlight.js","hash":"a52ef27b8a21963326b05ef06f6ee104b8b94e7e","modified":1666276245633},{"_id":"themes/zhaoo/source/lib/lazyload/lazyload.js","hash":"338318e930487b2791a7bcf53ad4601630cc41e2","modified":1666276245636},{"_id":"themes/zhaoo/source/lib/pjax/pjax.js","hash":"0ced78e5c97127948f5bfbfbb80c4fce5c0f671e","modified":1666276245640},{"_id":"themes/zhaoo/source/lib/qrcode/qrcode.js","hash":"f424bd339870510d1160d1c5da5d698aedbb452e","modified":1666276245641},{"_id":"themes/zhaoo/_example/source/galleries/colorful/index.md","hash":"d825ba0a41ff7ef253356a14bac6bfaf02135435","modified":1666276245498},{"_id":"themes/zhaoo/_example/source/galleries/深圳日记/index.md","hash":"ed9640b8192a9a9ce4771a33a8c2671d408fbb80","modified":1666276245500},{"_id":"themes/zhaoo/_example/source/galleries/记事/index.md","hash":"487e5b5267f2a83fd35ce179a57e3d54e8e2b870","modified":1666276245501},{"_id":"themes/zhaoo/source/css/_pages/_archive/archive.styl","hash":"9a680e104a6418997e093303bb93f9097553d049","modified":1666276245588},{"_id":"themes/zhaoo/source/css/_pages/_category/categories.styl","hash":"66f983e15ebca02d95342d00234981fa6c04825d","modified":1666276245589},{"_id":"themes/zhaoo/source/css/_pages/_gallery/galleries.styl","hash":"4d520006b28d419732314eeefe13201562089a9a","modified":1666276245590},{"_id":"themes/zhaoo/source/css/_pages/_gallery/gallery.styl","hash":"4f1975a81247e226d63c50b9500278d969e6257a","modified":1666276245591},{"_id":"themes/zhaoo/source/css/_pages/_index/index.styl","hash":"3a69a450ec352b480a691521f85011659d136487","modified":1666276245592},{"_id":"themes/zhaoo/source/css/_pages/_post/toc.styl","hash":"fc0c97ec7d9e98b79493cdd26452f4bb5defab08","modified":1666276245594},{"_id":"themes/zhaoo/source/css/_pages/_post/article.styl","hash":"1a155390dc8f332dd324a7a0b057055d9d63ff33","modified":1666276245594},{"_id":"themes/zhaoo/source/css/_pages/_tag/tags.styl","hash":"0ca5f9f71dab35247cf3b1318b2995a7e9058426","modified":1666276245596},{"_id":"themes/zhaoo/source/lib/fancybox/fancybox.js","hash":"6181412e73966696d08e1e5b1243a572d0f22ba6","modified":1666276245626},{"_id":"themes/zhaoo/source/lib/jquery/jquery.js","hash":"88523924351bac0b5d560fe0c5781e2556e7693d","modified":1666276245634},{"_id":"themes/zhaoo/source/images/theme/cloud.png","hash":"fdf44a91026ad999dca2f0a42213aabebd783c98","modified":1666276245609},{"_id":"themes/zhaoo/source/images/theme/post-image.jpg","hash":"7fb1947508a411177829cedac8d5922671cac2b0","modified":1666276245612},{"_id":"themes/zhaoo/source/lib/gitalk/gitalk.js","hash":"266500948447c95aeea95ef6760f192afc96fd5e","modified":1666276245630},{"_id":"themes/zhaoo/screenshots/menu.png","hash":"0f4220734a52953636a5273d64a03c8b01ec6098","modified":1666276245563},{"_id":"themes/zhaoo/source/lib/lottie/lottie.js","hash":"35a3798d0f059f95c5d790eec56798ac10e07319","modified":1666276245638},{"_id":"themes/zhaoo/source/images/theme/welcome-image.jpg","hash":"79e9c9e83a6d8a0bb627e645b770dd2628cd546e","modified":1666276245615},{"_id":"themes/zhaoo/screenshots/galleries.png","hash":"8ba5a26c7932d5ef456cc799bbc00c5f468e54cc","modified":1666276245554},{"_id":"themes/zhaoo/source/lib/daovoice/daovoice.js","hash":"180375e6fc5a5a71810b5e83109c0ce1533bbc5a","modified":1666276245623},{"_id":"themes/zhaoo/screenshots/article.png","hash":"74706d28c479a20f77c1bd4454879cabf8784ca6","modified":1666276245550},{"_id":"themes/zhaoo/screenshots/index.png","hash":"a95df16106c813b92f14071bac3d38bc53a1bc00","modified":1666276245560},{"_id":"themes/zhaoo/screenshots/preview.png","hash":"2b4271a275b9ff8318d00ab04504a109ec931fe7","modified":1666276245568},{"_id":"themes/zhaoo/source/images/icons/favicon.ico","hash":"c74dd013f8f56ae33f1c1c745fbeb3df5a587aa8","modified":1666085044708},{"_id":"themes/zhaoo/source/images/we-chat.jpg","hash":"9b67b2e617cebcae6c01c6d43c53821f180d1ece","modified":1666282894444},{"_id":"themes/zhaoo/yarn.lock","hash":"75960379fd4e62e40162757196d774fac8279a35","modified":1666691034544},{"_id":"themes/zhaoo/source/images/icons/favicon.png","hash":"c74dd013f8f56ae33f1c1c745fbeb3df5a587aa8","modified":1666085044708},{"_id":"themes/chic/ChangeLogs.md","hash":"0244985e7e4797e3d0a0e173dce4e341f6aa5dd0","modified":1666693387183},{"_id":"themes/chic/LICENSE.md","hash":"9911bdafa287bd65a822f84cc12012980bd10247","modified":1666693387185},{"_id":"themes/chic/README-CN.md","hash":"af0765f26b72d49f1b29afe1a9d0c4a492912aaa","modified":1666693387186},{"_id":"themes/chic/README.md","hash":"e0bd27664e1d0b4ed1c8101d2bf69886c66c31d9","modified":1666693387189},{"_id":"themes/chic/_config.yml","hash":"8d4f7cd6cc0668ccde79e8158505f55c90d1e08a","modified":1668488664781},{"_id":"themes/chic/package.json","hash":"8b4072879307eed0e74ae35390825c5e03b9229c","modified":1666693387242},{"_id":"themes/chic/languages/default.yml","hash":"3083f319b352d21d80fc5e20113ddf27889c9d11","modified":1666693387195},{"_id":"themes/chic/languages/de.yml","hash":"3ebf0775abbee928c8d7bda943c191d166ded0d3","modified":1666693387193},{"_id":"themes/chic/languages/es.yml","hash":"76edb1171b86532ef12cfd15f5f2c1ac3949f061","modified":1666693387196},{"_id":"themes/chic/languages/fr.yml","hash":"415e1c580ced8e4ce20b3b0aeedc3610341c76fb","modified":1666693387197},{"_id":"themes/chic/languages/ja.yml","hash":"a73e1b9c80fd6e930e2628b393bfe3fb716a21a9","modified":1666693387199},{"_id":"themes/chic/languages/ko.yml","hash":"881d6a0a101706e0452af81c580218e0bfddd9cf","modified":1666693387200},{"_id":"themes/chic/languages/nl.yml","hash":"12ed59faba1fc4e8cdd1d42ab55ef518dde8039c","modified":1666693387202},{"_id":"themes/chic/languages/no.yml","hash":"965a171e70347215ec726952e63f5b47930931ef","modified":1666693387203},{"_id":"themes/chic/languages/pt.yml","hash":"57d07b75d434fbfc33b0ddb543021cb5f53318a8","modified":1666693387205},{"_id":"themes/chic/languages/ru.yml","hash":"4fda301bbd8b39f2c714e2c934eccc4b27c0a2b0","modified":1666693387206},{"_id":"themes/chic/languages/zh-CN.yml","hash":"ca40697097ab0b3672a80b455d3f4081292d1eed","modified":1666693387207},{"_id":"themes/chic/languages/zh-TW.yml","hash":"53ce3000c5f767759c7d2c4efcaa9049788599c3","modified":1666693387208},{"_id":"themes/chic/layout/archive.ejs","hash":"48cdf67b628eb6a1c24d484ed252f5b0e3f06ddf","modified":1666693387233},{"_id":"themes/chic/layout/category.ejs","hash":"875bc4f03b69df47a8893b5dba32b318d672d1e2","modified":1666784645193},{"_id":"themes/chic/layout/index.ejs","hash":"b3344720176ad12dc88745cc5b31d497356ca4fa","modified":1666693387236},{"_id":"themes/chic/layout/layout.ejs","hash":"2dd9bcde47f64db09b7d461c4e9b6cb1325b16fd","modified":1666781628188},{"_id":"themes/chic/layout/page.ejs","hash":"3179c527694a789760742e1923c7ac5f94b4997c","modified":1666693387238},{"_id":"themes/chic/layout/post.ejs","hash":"a23f83d6c559ce88588472267468a54488d50e8e","modified":1666693387240},{"_id":"themes/chic/layout/tag.ejs","hash":"8daa66a356f9412afe5a69282f513a8f31769400","modified":1666784645194},{"_id":"themes/chic/scripts/imageTag.js","hash":"4b69804c1e4bf638eda7022499c440ce24e28587","modified":1666693387244},{"_id":"themes/chic/source/favicon.ico","hash":"f1a28807bbd587b99a0c67ddb171df4a7f88383f","modified":1666804377009},{"_id":"themes/chic/layout/_page/archive.ejs","hash":"464549286c92ea0d6cb057c6936e0f1a5d1c1dd2","modified":1666693387212},{"_id":"themes/chic/layout/_page/category.ejs","hash":"c420872749e0ba6546fbd6951a9fe159cb3610a2","modified":1666788328353},{"_id":"themes/chic/layout/_page/page.ejs","hash":"1d875d59cf4d6b681cc8cf755f19b5355e5d1144","modified":1666693387215},{"_id":"themes/chic/layout/_page/post.ejs","hash":"6eb9cd3ee904e99ff78509298ae31a29fdbf49cf","modified":1666693387216},{"_id":"themes/chic/layout/_page/profile.ejs","hash":"f49991a55cc08a1d90d8d6ae8d15a692163272e1","modified":1666693387218},{"_id":"themes/chic/layout/_page/tag.ejs","hash":"62b6946a0a16ad5ec477ae847aa53d85b34a0948","modified":1666788343643},{"_id":"themes/chic/layout/_plugins/mathjax.ejs","hash":"53f088fe44d51c4d9fb61aeac4c23b3cfcc19762","modified":1666693387231},{"_id":"themes/chic/layout/_partial/footer.ejs","hash":"9789da440f182e53b357ee72fa49d904a8e0be49","modified":1666837450108},{"_id":"themes/chic/layout/_partial/head.ejs","hash":"8c8a2d95e0858cf0be9bf60d0ddf26876e1d9d35","modified":1666693387224},{"_id":"themes/chic/layout/_partial/header.ejs","hash":"8f1e5272a4de96a3ed94de1db988b05b34515463","modified":1666781043560},{"_id":"themes/chic/layout/_partial/paginator.ejs","hash":"ab59d5db77f2aa64dfe03656e72fd49702c62e23","modified":1666693387226},{"_id":"themes/chic/layout/_partial/toc.ejs","hash":"c47e8a5047ce0016f74b76028878d386af78bb7c","modified":1666693387229},{"_id":"themes/chic/source/css/base.styl","hash":"72aef06d738853f13f1697b091002d6d776bd56d","modified":1666693387387},{"_id":"themes/chic/source/css/custom.styl","hash":"bf8dee1a094b104d87a53b43f6daa7ba43b67574","modified":1666693387388},{"_id":"themes/chic/source/css/font.styl","hash":"1b6de759815654966decfffb33b46a81dde53a8f","modified":1669430866841},{"_id":"themes/chic/source/css/layout.styl","hash":"4d9f83b5a3bac81e7857358744858fae708320de","modified":1666693387392},{"_id":"themes/chic/source/css/media.styl","hash":"f96c0dbb9653667906a6dc271f637543ac5c7212","modified":1666693387394},{"_id":"themes/chic/source/css/normalize.styl","hash":"b3337320133b7a336db7033aa6bbe94b054c0b21","modified":1666693387395},{"_id":"themes/chic/source/css/style.styl","hash":"a13f2c38070a89b06a2ede599f5ce5fd160e11c9","modified":1666693387397},{"_id":"themes/chic/source/css/variable.styl","hash":"906faa95457eba70118a0705e13b8f43409e502f","modified":1666693387398},{"_id":"themes/chic/source/image/avatar.jpeg","hash":"5d46dc78e55390dfab0149798249bf655dd03fca","modified":1666693387523},{"_id":"themes/chic/source/js/mathjax2.7.5.js","hash":"7ba18c783d543cfb4b45a0118ccb73d3f68cd46e","modified":1666693387526},{"_id":"themes/chic/source/js/script.js","hash":"ee0a12f2a33e71ee368d5a00270ef443cfc16d27","modified":1666781371358},{"_id":"themes/chic/source/js/tocbot.min.js","hash":"bae97e8a24a05a99335f8e725641c8ca9c50502a","modified":1666693387528},{"_id":"themes/chic/source/css/_highlight/agate.styl","hash":"53027913ed8d4f75ac3e49e76aad824f0df62da3","modified":1666693387248},{"_id":"themes/chic/source/css/_highlight/androidstudio.styl","hash":"2af0861725f97f0ee2ded67c3d2d4548c62b2d16","modified":1666693387250},{"_id":"themes/chic/source/css/_highlight/arduino-light.styl","hash":"15e8572585cd708221c513dea4bdd89d8fe56c10","modified":1666693387252},{"_id":"themes/chic/source/css/_highlight/arta.styl","hash":"b3e81e3e694ceb8deed178adb8b91013c5120e30","modified":1666693387253},{"_id":"themes/chic/source/css/_highlight/ascetic.styl","hash":"32cff3bef6fac3760fe78f203096477052a90552","modified":1666693387254},{"_id":"themes/chic/source/css/_highlight/atelier-cave-dark.styl","hash":"ce63dd8548688d88254405eedfa75b1d7c82449e","modified":1666693387255},{"_id":"themes/chic/source/css/_highlight/atelier-cave-light.styl","hash":"a5be0744a7ecf4a08f600ade4cfd555afc67bc15","modified":1666693387256},{"_id":"themes/chic/source/css/_highlight/atelier-dune-dark.styl","hash":"c196ff0ee064af0e507823694ae39020addfc280","modified":1666693387258},{"_id":"themes/chic/source/css/_highlight/atelier-dune-light.styl","hash":"931435fbc6f974e8ce9e32722680035d248a9dc1","modified":1666693387259},{"_id":"themes/chic/source/css/_highlight/atelier-estuary-dark.styl","hash":"0bb16a4eff93688f40787abc2f9e56e7d5cc93e7","modified":1666693387260},{"_id":"themes/chic/source/css/_highlight/atelier-estuary-light.styl","hash":"344276ca9b27e51d4c907f76afe5d13cf8e60bdf","modified":1666693387261},{"_id":"themes/chic/source/css/_highlight/atelier-forest-dark.styl","hash":"effbc5d75fa87203c847039869c22031b40d5b7d","modified":1666693387262},{"_id":"themes/chic/source/css/_highlight/atelier-forest-light.styl","hash":"95228d9f2102fad425536aac44b80b2cba1f5950","modified":1666693387265},{"_id":"themes/chic/source/css/_highlight/atelier-heath-dark.styl","hash":"9a2e9a1d0a01bbdf158560c3ed1c134e098b2c68","modified":1666693387266},{"_id":"themes/chic/source/css/_highlight/atelier-heath-light.styl","hash":"8c8c2e445abef85273be966d59770e9ced6aac21","modified":1666693387268},{"_id":"themes/chic/source/css/_highlight/atelier-lakeside-dark.styl","hash":"10ee3882fca7b97a37bd309d2d35fce9868647bb","modified":1666693387269},{"_id":"themes/chic/source/css/_highlight/atelier-lakeside-light.styl","hash":"2c54cb9bdb259ae3b5b29f63ac2469ed34b08578","modified":1666693387273},{"_id":"themes/chic/source/css/_highlight/atelier-plateau-dark.styl","hash":"84c80e6f67f62fce958d25817c277d2360272617","modified":1666693387275},{"_id":"themes/chic/source/css/_highlight/atelier-plateau-light.styl","hash":"d1a05fdd1ededc9063d181ab25bad55a164aeb4a","modified":1666693387276},{"_id":"themes/chic/source/css/_highlight/atelier-savanna-dark.styl","hash":"e32c1c70def8060fce5e790979a126da650ac642","modified":1666693387277},{"_id":"themes/chic/source/css/_highlight/atelier-savanna-light.styl","hash":"f8244c93711c7cb59dd79d2df966806b30d171ea","modified":1666693387278},{"_id":"themes/chic/source/css/_highlight/atelier-seaside-dark.styl","hash":"2edf385215bbe1985b1a10106525d362667d28c2","modified":1666693387280},{"_id":"themes/chic/source/css/_highlight/atelier-seaside-light.styl","hash":"0597342da6e2d0c5bdcc7d42dabb07322b1a4177","modified":1666693387281},{"_id":"themes/chic/source/css/_highlight/atelier-sulphurpool-dark.styl","hash":"538a14321193cd8abf2ddc484306631e54149ffb","modified":1666693387282},{"_id":"themes/chic/source/css/_highlight/atelier-sulphurpool-light.styl","hash":"efa52713efc468abeeb2b9299704371583b857de","modified":1666693387283},{"_id":"themes/chic/source/css/_highlight/brown-paper.styl","hash":"329b85ae9130a5587a6fb1c6f80396f9cca5ddc1","modified":1666693387285},{"_id":"themes/chic/source/css/_highlight/brown-papersq.png","hash":"3a1332ede3a75a3d24f60b6ed69035b72da5e182","modified":1666693387287},{"_id":"themes/chic/source/css/_highlight/codepen-embed.styl","hash":"8b7b34484f76a6c2c3b1a9e49abb9b382f439ae8","modified":1666693387288},{"_id":"themes/chic/source/css/_highlight/color-brewer.styl","hash":"2a439d6214430e2f45dd4939b4dfe1fe1a20aa0f","modified":1666693387289},{"_id":"themes/chic/source/css/_highlight/dark.styl","hash":"f5e6e75958de59e87fc6be3a1668e870e20bc836","modified":1666693387291},{"_id":"themes/chic/source/css/_highlight/darkula.styl","hash":"9717efa9194837ba3fb4d762997d33075dcf8bfa","modified":1666693387293},{"_id":"themes/chic/source/css/_highlight/docco.styl","hash":"b1c176378bb275f2e8caa759f36294e42d614bf1","modified":1666693387294},{"_id":"themes/chic/source/css/_highlight/far.styl","hash":"aaac3028f5e33123cd123a583cddc9290c45ec8e","modified":1666693387296},{"_id":"themes/chic/source/css/_highlight/foundation.styl","hash":"bf8ddc94b4ad995b8b8805b5a4cf95004553fdac","modified":1666693387297},{"_id":"themes/chic/source/css/_highlight/github-gist.styl","hash":"48211a03d33e7f7ada0b261162bea06676155a71","modified":1666693387299},{"_id":"themes/chic/source/css/_highlight/googlecode.styl","hash":"bda816beee7b439814b514e6869dc678822be1bc","modified":1666693387302},{"_id":"themes/chic/source/css/_highlight/github.styl","hash":"3336aeba324c6d34a6fd41fef9b47bc598f7064c","modified":1666693387300},{"_id":"themes/chic/source/css/_highlight/grayscale.styl","hash":"bf37d8b8d1e602126c51526f0cc28807440228ed","modified":1666693387303},{"_id":"themes/chic/source/css/_highlight/gruvbox-dark.styl","hash":"76b744c14fd5600bea64731c05df97c2df75523f","modified":1666693387305},{"_id":"themes/chic/source/css/_highlight/highlightjs.styl","hash":"65b5981dc3c57cedd1cb668c0e377230987e08d1","modified":1666693387307},{"_id":"themes/chic/source/css/_highlight/hybrid.styl","hash":"b8eb5c69d12f2ee5ebc50265ae271699d7f1a8d3","modified":1666693387310},{"_id":"themes/chic/source/css/_highlight/hopscotch.styl","hash":"1378a6bc67a32c0cbff72ab771268b53f9aa586d","modified":1666693387309},{"_id":"themes/chic/source/css/_highlight/idea.styl","hash":"a02967cb51c16a34e0ee895d33ded2b823d35b21","modified":1666693387311},{"_id":"themes/chic/source/css/_highlight/index.styl","hash":"002d5596f6379cc87dbd43d9145bc764aa666be1","modified":1666693387313},{"_id":"themes/chic/source/css/_highlight/ir-black.styl","hash":"53e5d74326a4527b92272bbd6946d4fec92720e8","modified":1666693387314},{"_id":"themes/chic/source/css/_highlight/kimbie.dark.styl","hash":"45dbb168f22d739d0109745d2decd66b5f94e786","modified":1666693387315},{"_id":"themes/chic/source/css/_highlight/kimbie.light.styl","hash":"61f8baed25be05288c8604d5070afbcd9f183f49","modified":1666693387317},{"_id":"themes/chic/source/css/_highlight/kimbie.styl","hash":"51b889ca7c6fe178cfbbe28d875a6ea427184441","modified":1666693387318},{"_id":"themes/chic/source/css/_highlight/magula.styl","hash":"16d323f989b1420a0f72ef989242ece9bf17a456","modified":1666693387320},{"_id":"themes/chic/source/css/_highlight/monokai-sublime.styl","hash":"c385b11345894be7e6ce3c5f08663e199933b8e4","modified":1666693387323},{"_id":"themes/chic/source/css/_highlight/mono-blue.styl","hash":"4c89a6ae29de67c0700585af82a60607e85df928","modified":1666693387321},{"_id":"themes/chic/source/css/_highlight/monokai.styl","hash":"f87be027848ea6bee623a08ad1e17b2f5b7937ee","modified":1666693387324},{"_id":"themes/chic/source/css/_highlight/obsidian.styl","hash":"199e28326be8590883f0813ebbd54fcfaa4750fd","modified":1666693387326},{"_id":"themes/chic/source/css/_highlight/paraiso-dark.styl","hash":"f1537bd868579fa018ecdbfd2eb922dcf3ba2cac","modified":1666693387327},{"_id":"themes/chic/source/css/_highlight/paraiso-light.styl","hash":"d224d1df0eb3395d9eea1344cee945c228af2911","modified":1666693387328},{"_id":"themes/chic/source/css/_highlight/paraiso.styl","hash":"75f181eece6b71d033ea0c8d6cf00ae7efb9e29b","modified":1666693387330},{"_id":"themes/chic/source/css/_highlight/pojoaque.jpg","hash":"c5fe6533b88b21f8d90d3d03954c6b29baa67791","modified":1666693387332},{"_id":"themes/chic/source/css/_highlight/pojoaque.styl","hash":"2601b4285803a7cea5ccded8d624ca95f80e3d88","modified":1666693387333},{"_id":"themes/chic/source/css/_highlight/railscasts.styl","hash":"b6674db9210e0c4444e4835fff2d1361f3ebd64c","modified":1666693387335},{"_id":"themes/chic/source/css/_highlight/rainbow.styl","hash":"c0cf97aae3e10fdcd10414547a711c9effbc39b8","modified":1666693387337},{"_id":"themes/chic/source/css/_highlight/school-book.png","hash":"711ec983c874e093bb89eb77afcbdf6741fa61ee","modified":1666693387338},{"_id":"themes/chic/source/css/_highlight/school-book.styl","hash":"beabbbcc7930f8de19159381a01c0ba41dc2291f","modified":1666693387339},{"_id":"themes/chic/source/css/_highlight/solarized-dark.styl","hash":"90c9da5aa594383697e5b18892a7f95beb053f55","modified":1666693387341},{"_id":"themes/chic/source/css/_highlight/solarized-light.styl","hash":"aa0dd3fd25c464183b59c5575c9bee8756b397f2","modified":1666693387342},{"_id":"themes/chic/source/css/_highlight/sunburst.styl","hash":"af3eec0fd56151e55bbd49c31b151f36717611d8","modified":1666693387344},{"_id":"themes/chic/source/css/_highlight/tomorrow-night-bright.styl","hash":"7674fecb6d27350727dc0d2dc93bc018382ebbd0","modified":1666693387346},{"_id":"themes/chic/source/css/_highlight/tomorrow-night-blue.styl","hash":"f24c17d0ab815dcfaab3438cb9fe2ab4839f5e0d","modified":1666693387345},{"_id":"themes/chic/source/css/_highlight/tomorrow-night-eighties.styl","hash":"28d751075ebabf7d0327a36f725076fe82fdf626","modified":1666693387348},{"_id":"themes/chic/source/css/_highlight/tomorrow-night.styl","hash":"16ba09b2db501e4e3e2e7d62595d9bf935bf27c4","modified":1666693387349},{"_id":"themes/chic/source/css/_highlight/tomorrow.styl","hash":"15779cf6846725c7c35fc56cac39047d7e0aec1c","modified":1666693387350},{"_id":"themes/chic/source/css/_highlight/vs.styl","hash":"959a746f4b37aacb5d1d6ff1d57e0c045289d75d","modified":1666693387352},{"_id":"themes/chic/source/css/_highlight/xcode.styl","hash":"5e8532ae8366dcf6a4ef5e4813dc3d42ab3d0a50","modified":1666693387354},{"_id":"themes/chic/source/css/_highlight/zenburn.styl","hash":"68ff9332ccc03f9389b15b713415cde016f8088f","modified":1666693387355},{"_id":"themes/chic/source/css/_lib/looper.css","hash":"863144dc9af7c1e181670515bc85eaf768f4e287","modified":1666693387358},{"_id":"themes/chic/source/css/_lib/tocbot.css","hash":"15601837bf8557c2fd111e4450ed4c8495fd11a0","modified":1666693387360},{"_id":"themes/chic/source/css/_page/archive.styl","hash":"71ea842f068b29b4418dd09450db09d27dcf0947","modified":1666693387374},{"_id":"themes/chic/source/css/_page/category.styl","hash":"cead361269616b7a6ddec3090d9fa34c3c6ac722","modified":1666693387375},{"_id":"themes/chic/source/css/_page/page.styl","hash":"34e33b52d2e046aa2f5494e81ff4ac2d5ca78058","modified":1666693387377},{"_id":"themes/chic/source/css/_partial/footer.styl","hash":"4f58e607eaa59cda3b5a9fdb3404ffb75c4d1a03","modified":1666693387382},{"_id":"themes/chic/source/css/_page/profile.styl","hash":"057097e714284e72e97ab8a808a30df45555a342","modified":1666693387378},{"_id":"themes/chic/source/css/_page/tag.styl","hash":"55b220cc58011876fb3a470cd1fde8ed87c93079","modified":1666693387379},{"_id":"themes/chic/source/css/_partial/header.styl","hash":"be70b4ab3bcc977f1055664899742804c716929d","modified":1666693387383},{"_id":"themes/chic/source/css/_partial/paginator.styl","hash":"b4f4a5180c4cbc70d186792b8a1fd0f5855bd86a","modified":1666693387385},{"_id":"themes/chic/source/fonts/iconfont/demo.css","hash":"65c50db528a5abe06426b1a20735feaf1f2a0d9b","modified":1666693387404},{"_id":"themes/chic/source/fonts/iconfont/demo_index.html","hash":"16e01463756a77b4acd15ade4e6b73f0376d75e1","modified":1666693387407},{"_id":"themes/chic/source/fonts/iconfont/iconfont.eot","hash":"d18736f7885569e497698d17f49b9167add67dc6","modified":1666693387411},{"_id":"themes/chic/source/fonts/iconfont/iconfont.css","hash":"1e5540dca41dc53879226750f936e72daf616662","modified":1666693387409},{"_id":"themes/chic/source/fonts/iconfont/iconfont.js","hash":"87bfdaae31251f4d605646c5ae9c67196f6cc4e2","modified":1666693387412},{"_id":"themes/chic/source/fonts/iconfont/iconfont.json","hash":"eae94b803d34035008842855d0bead92d2035281","modified":1666693387414},{"_id":"themes/chic/source/fonts/iconfont/iconfont.svg","hash":"5c9c4e44179a7435d0f91df4ce1154dd677ad8c2","modified":1666693387416},{"_id":"themes/chic/source/fonts/iconfont/iconfont.ttf","hash":"41c4f4dc82e42452dcfd19caed6c7dc333ee769e","modified":1666693387417},{"_id":"themes/chic/source/fonts/iconfont/iconfont.woff","hash":"a57593c49b56c16ac1def0e1f3dbca3f658b3579","modified":1666693387419},{"_id":"themes/chic/source/fonts/iconfont/iconfont.woff2","hash":"39d97a0f72417487f5c1e0a0abf8e27dd6ebda31","modified":1666693387421},{"_id":"themes/chic/source/css/_page/_post/post_code.styl","hash":"06c3a3524ffd4b27e03e79489001997ea5d727d3","modified":1666693387363},{"_id":"themes/chic/source/css/_page/_post/post_content.styl","hash":"5e3d63077549d8e2e5ff8c452e809760f5a99c17","modified":1666693387365},{"_id":"themes/chic/source/css/_page/_post/post_header.styl","hash":"d37b032bc5edca92c84bf62070a28fa40939df55","modified":1666693387368},{"_id":"themes/chic/source/css/_page/_post/post_nav.styl","hash":"03accaba13c995cbe65a05a88549ff74e992eb3f","modified":1666693387369},{"_id":"themes/chic/source/css/_page/_post/post_copyright.styl","hash":"64fd9f07ed45f035057d46740af0db70218714aa","modified":1666693387366},{"_id":"themes/chic/source/css/_page/_post/post_tags.styl","hash":"2ff93677aa4d81da83c659b4dd4e3cb482d9ce7d","modified":1666693387371},{"_id":"themes/chic/source/css/_page/_post/post_toc.styl","hash":"15e1ec7af93f41184f986aba21991a79923b0a0e","modified":1666693387372},{"_id":"themes/chic/source/fonts/lanting/lanting.woff2","hash":"5f325fcd2726a5b44e08b7004a5219e14847cbfa","modified":1666693387520},{"_id":"themes/chic/source/fonts/lanting/lanting.woff","hash":"642ad1f17d27d4b1010d1a0571d1b44cbc823d9d","modified":1666693387515},{"_id":"themes/chic/source/fonts/lanting/lanting.eot","hash":"3e184614f037939a6f98d607da3ed7dffb350e65","modified":1666693387470},{"_id":"themes/chic/source/fonts/lanting/lanting.TTF","hash":"97e9a4538cceef4b17d54c7dc589524905d1b685","modified":1666693387449},{"_id":"themes/chic/source/fonts/lanting/lanting.otf","hash":"4e184da596772d3ef6e5763cdee3e46a1ce2f2dd","modified":1666693387508},{"_id":"themes/chic/source/image/avatar.jpg","hash":"fe6272245d6e5e259c270452ff71a24715434d44","modified":1662050721272},{"_id":"source/about/index.md","hash":"1e95bed9a77e1571ce6b75bbcd78996ef649827c","modified":1668714070275},{"_id":"source/category/index.md","hash":"eb3205ccd0e75ebe8b4db88515e8b0ebe623c880","modified":1666782939970},{"_id":"source/tag/index.md","hash":"3c558526df0013ed3f5a19012b8f789f537bd5b7","modified":1666782913403},{"_id":"source/_posts/debounce-throttle.md","hash":"770886175c891561c1aafd9f8a2961be6d7099a6","modified":1666847592040},{"_id":"source/_posts/call-bind-apply.md","hash":"d967b9cced58107546c193caa50e39352dc59007","modified":1666847592037},{"_id":"source/_posts/composition-extend.md","hash":"a3f0d900de1de0198bbaafaa5053a79b3908172b","modified":1668399306528},{"_id":"source/_posts/foreach-map.md","hash":"d4fdbee4fe0e775bade0685a79790de244fd5ded","modified":1666847592041},{"_id":"source/_posts/draw-triangle.md","hash":"f77c9d0b0e66d218b6df28fa60e86f18d665e34a","modified":1668714533703},{"_id":"source/_posts/new-operator.md","hash":"088c01caa6beaef6121843f867010643f196d1f5","modified":1668657910269},{"_id":"source/_posts/renderer.md","hash":"295ad86162344b1d00ae042fa0c667144a1e4bcb","modified":1666803027188},{"_id":"source/_posts/submodule.md","hash":"35a05f6c65073f396fcb49677f6a0c2010d0dbdc","modified":1666837818177},{"_id":"source/_posts/study-canvas-webpack.md","hash":"9321481a681135175acc6fe2d5e03fab16f2cdc5","modified":1668658288727},{"_id":"source/_posts/note-2022-11-17.md","hash":"c7a9d0c52408c381e453b86f3636fc620bd1744c","modified":1668713812738},{"_id":"source/_posts/learn-canvas.md","hash":"c95fdc2cdeb23e72bcaf8d90ae11017090e2a701","modified":1668797653297},{"_id":"source/_posts/learn-webpack.md","hash":"0148f284a7148c757289eed46039c6e2467b3fff","modified":1670866818548},{"_id":"themes/chic/source/fonts/lanting/SmileySans-Oblique.ttf.woff2","hash":"9117ed35f4ce009da2f87d9599cb8ff69895aa6d","modified":1668948583792},{"_id":"themes/chic/source/fonts/lanting/SmileySans-Oblique.otf.woff2","hash":"4fc22d802eafec52f271306fa7b88f56a0b5b9cb","modified":1668948583829},{"_id":"themes/chic/source/fonts/lanting/SmileySans-Oblique.otf","hash":"f99a247b50b565277f6f269e3a5bdd98062a2a13","modified":1668948583815},{"_id":"themes/chic/source/fonts/lanting/SmileySans-Oblique.ttf","hash":"25402babb03830e4a00dfdf959661ccfc81e4a40","modified":1668948583854},{"_id":"source/_posts/learn-react.md","hash":"9aab3cea626dc38ca8dfdff44de03ac22990591e","modified":1669216767521},{"_id":"themes/chic/source/fonts/arial/Arial.woff","hash":"fac5a478f83044c2fe2b026f6d2b26700d383f20","modified":1669430661920},{"_id":"themes/chic/source/fonts/arial/Arial.ttf","hash":"49f0ee6148e6b674a60450d86faaddbb97d798f3","modified":1669430653313},{"_id":"source/_posts/note-2022-11-27.md","hash":"89e1507c230c9e3648ba3055523f140853af713f","modified":1669539116350},{"_id":"source/_posts/note-2022-12-23.md","hash":"35e6997403ab5d0c90b4f392c11a92bf9a1252a4","modified":1671800828376}],"Category":[{"name":"Test","_id":"cl9pjndnu0000akfg38lv8p77"},{"name":"前端","_id":"cl9pm0yj80001bgfg800jhznb"},{"name":"工具","_id":"cl9qg7iyf0001n0w50aa6e5rz"},{"name":"随笔","_id":"clakk2bh200012wfgcpmse3ih"},{"name":"闲聊","_id":"clb0mkkls0001igfgerdf7f8f"}],"Data":[],"Page":[{"title":"About","date":"2022-10-26T11:13:54.000Z","_content":"\n我叫小维，一名 Web 前端开发人员\n","source":"about/index.md","raw":"---\ntitle: About\ndate: 2022-10-26 19:13:54\n---\n\n我叫小维，一名 Web 前端开发人员\n","updated":"2022-11-17T19:41:10.275Z","path":"about/index.html","_id":"cl9pjjhny000050fg0qmzccd4","comments":1,"layout":"page","content":"<p>我叫小维，一名 Web 前端开发人员</p>\n","site":{"data":{}},"excerpt":"","more":"<p>我叫小维，一名 Web 前端开发人员</p>\n"},{"title":"Category","layout":"category","date":"2022-10-26T11:13:45.000Z","_content":"","source":"category/index.md","raw":"---\ntitle: Category\nlayout: category\ndate: 2022-10-26 19:13:45\n---\n","updated":"2022-10-26T11:15:39.970Z","path":"category/index.html","comments":1,"_id":"cl9pjjho0000150fgeb1qhj70","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"Tag","layout":"tag","date":"2022-10-26T11:13:22.000Z","_content":"","source":"tag/index.md","raw":"---\ntitle: Tag\nlayout: tag\ndate: 2022-10-26 19:13:22\n---\n","updated":"2022-10-26T11:15:13.403Z","path":"tag/index.html","comments":1,"_id":"cl9pjjho1000250fg0jvphgnh","content":"","site":{"data":{}},"excerpt":"","more":""}],"Post":[{"title":"防抖和节流","date":"2022-10-26T12:04:26.000Z","_content":"\n> 防抖：触发高频事件后n秒内函数只会执行一次，如果n秒内高频事件再次被触发，则重新计算时间\n\n防抖可以用 `setTimeout` 来完成，然后每次触发事件时都取消之前的延时调用方法就可以了\n\n实现代码如下：\n\n```javascript\nsayHello() {\n  console.log('我被调用啦！！！')\n}\n// 防抖\nfunction debounce(fn) {\n  let timeout = null\n  return function () {\n    if (timeout === null) {\n      fn.apply(this, arguments) // 使用apply让fn指向调用debounce的对象，不写将导致fn的this将指向window\n    }\n    clearTimeout(timeout)\n    timeout = setTimeout(() => {\n      timeout = null\n    }, 1000)\n  }\n}\nlet btn = document.getElementById('debounce')\nbtn.addEventListener('click',debounce(sayHello),false)\n```\n\n> 节流：高频事件触发，但在n秒内只会执行一次，所以节流会稀释函数的执行频率\n\n节流我们还是可以用 `setTimeout` 的方式来完成，定义一个延时标志，每次触发事件时都判断当前是否有等待执行的延时函数，有就继续等待，没有就再次调用\n\n实现代码如下：\n\n```javascript\nsayHello() {\n  console.log('我被调用啦！！！')\n}\nfunction throttle(fn) {\n  let run = false\n  return function () {\n    if (run) {\n      return\n    }\n    fn.apply(this, arguments)\n    run = true\n    setTimeout(() => {\n      run = false\n    }, 1000)\n  }\n}\nlet btn = document.getElementById('throttle')\nbtn.addEventListener('click',throttle(sayHello),false)\n```\n","source":"_posts/debounce-throttle.md","raw":"---\ntitle: 防抖和节流\ndate: 2022-10-26  20:04:26\ntags: [JavaScript]\ncategory: 前端\n---\n\n> 防抖：触发高频事件后n秒内函数只会执行一次，如果n秒内高频事件再次被触发，则重新计算时间\n\n防抖可以用 `setTimeout` 来完成，然后每次触发事件时都取消之前的延时调用方法就可以了\n\n实现代码如下：\n\n```javascript\nsayHello() {\n  console.log('我被调用啦！！！')\n}\n// 防抖\nfunction debounce(fn) {\n  let timeout = null\n  return function () {\n    if (timeout === null) {\n      fn.apply(this, arguments) // 使用apply让fn指向调用debounce的对象，不写将导致fn的this将指向window\n    }\n    clearTimeout(timeout)\n    timeout = setTimeout(() => {\n      timeout = null\n    }, 1000)\n  }\n}\nlet btn = document.getElementById('debounce')\nbtn.addEventListener('click',debounce(sayHello),false)\n```\n\n> 节流：高频事件触发，但在n秒内只会执行一次，所以节流会稀释函数的执行频率\n\n节流我们还是可以用 `setTimeout` 的方式来完成，定义一个延时标志，每次触发事件时都判断当前是否有等待执行的延时函数，有就继续等待，没有就再次调用\n\n实现代码如下：\n\n```javascript\nsayHello() {\n  console.log('我被调用啦！！！')\n}\nfunction throttle(fn) {\n  let run = false\n  return function () {\n    if (run) {\n      return\n    }\n    fn.apply(this, arguments)\n    run = true\n    setTimeout(() => {\n      run = false\n    }, 1000)\n  }\n}\nlet btn = document.getElementById('throttle')\nbtn.addEventListener('click',throttle(sayHello),false)\n```\n","slug":"debounce-throttle","published":1,"updated":"2022-10-27T05:13:12.040Z","_id":"cl9pm0yj50000bgfg33w4f2d5","comments":1,"layout":"post","photos":[],"link":"","content":"<blockquote>\n<p>防抖：触发高频事件后n秒内函数只会执行一次，如果n秒内高频事件再次被触发，则重新计算时间</p>\n</blockquote>\n<p>防抖可以用 <code>setTimeout</code> 来完成，然后每次触发事件时都取消之前的延时调用方法就可以了</p>\n<p>实现代码如下：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript\"><span class=\"hljs-title function_\">sayHello</span>(<span class=\"hljs-params\"></span>) &#123;<br>  <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">&#x27;我被调用啦！！！&#x27;</span>)<br>&#125;<br><span class=\"hljs-comment\">// 防抖</span><br><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">debounce</span>(<span class=\"hljs-params\">fn</span>) &#123;<br>  <span class=\"hljs-keyword\">let</span> timeout = <span class=\"hljs-literal\">null</span><br>  <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"></span>) &#123;<br>    <span class=\"hljs-keyword\">if</span> (timeout === <span class=\"hljs-literal\">null</span>) &#123;<br>      fn.<span class=\"hljs-title function_\">apply</span>(<span class=\"hljs-variable language_\">this</span>, <span class=\"hljs-variable language_\">arguments</span>) <span class=\"hljs-comment\">// 使用apply让fn指向调用debounce的对象，不写将导致fn的this将指向window</span><br>    &#125;<br>    <span class=\"hljs-built_in\">clearTimeout</span>(timeout)<br>    timeout = <span class=\"hljs-built_in\">setTimeout</span>(<span class=\"hljs-function\">() =&gt;</span> &#123;<br>      timeout = <span class=\"hljs-literal\">null</span><br>    &#125;, <span class=\"hljs-number\">1000</span>)<br>  &#125;<br>&#125;<br><span class=\"hljs-keyword\">let</span> btn = <span class=\"hljs-variable language_\">document</span>.<span class=\"hljs-title function_\">getElementById</span>(<span class=\"hljs-string\">&#x27;debounce&#x27;</span>)<br>btn.<span class=\"hljs-title function_\">addEventListener</span>(<span class=\"hljs-string\">&#x27;click&#x27;</span>,<span class=\"hljs-title function_\">debounce</span>(sayHello),<span class=\"hljs-literal\">false</span>)<br></code></pre></td></tr></table></figure>\n\n<blockquote>\n<p>节流：高频事件触发，但在n秒内只会执行一次，所以节流会稀释函数的执行频率</p>\n</blockquote>\n<p>节流我们还是可以用 <code>setTimeout</code> 的方式来完成，定义一个延时标志，每次触发事件时都判断当前是否有等待执行的延时函数，有就继续等待，没有就再次调用</p>\n<p>实现代码如下：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript\"><span class=\"hljs-title function_\">sayHello</span>(<span class=\"hljs-params\"></span>) &#123;<br>  <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">&#x27;我被调用啦！！！&#x27;</span>)<br>&#125;<br><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">throttle</span>(<span class=\"hljs-params\">fn</span>) &#123;<br>  <span class=\"hljs-keyword\">let</span> run = <span class=\"hljs-literal\">false</span><br>  <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"></span>) &#123;<br>    <span class=\"hljs-keyword\">if</span> (run) &#123;<br>      <span class=\"hljs-keyword\">return</span><br>    &#125;<br>    fn.<span class=\"hljs-title function_\">apply</span>(<span class=\"hljs-variable language_\">this</span>, <span class=\"hljs-variable language_\">arguments</span>)<br>    run = <span class=\"hljs-literal\">true</span><br>    <span class=\"hljs-built_in\">setTimeout</span>(<span class=\"hljs-function\">() =&gt;</span> &#123;<br>      run = <span class=\"hljs-literal\">false</span><br>    &#125;, <span class=\"hljs-number\">1000</span>)<br>  &#125;<br>&#125;<br><span class=\"hljs-keyword\">let</span> btn = <span class=\"hljs-variable language_\">document</span>.<span class=\"hljs-title function_\">getElementById</span>(<span class=\"hljs-string\">&#x27;throttle&#x27;</span>)<br>btn.<span class=\"hljs-title function_\">addEventListener</span>(<span class=\"hljs-string\">&#x27;click&#x27;</span>,<span class=\"hljs-title function_\">throttle</span>(sayHello),<span class=\"hljs-literal\">false</span>)<br></code></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<blockquote>\n<p>防抖：触发高频事件后n秒内函数只会执行一次，如果n秒内高频事件再次被触发，则重新计算时间</p>\n</blockquote>\n<p>防抖可以用 <code>setTimeout</code> 来完成，然后每次触发事件时都取消之前的延时调用方法就可以了</p>\n<p>实现代码如下：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript\"><span class=\"hljs-title function_\">sayHello</span>(<span class=\"hljs-params\"></span>) &#123;<br>  <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">&#x27;我被调用啦！！！&#x27;</span>)<br>&#125;<br><span class=\"hljs-comment\">// 防抖</span><br><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">debounce</span>(<span class=\"hljs-params\">fn</span>) &#123;<br>  <span class=\"hljs-keyword\">let</span> timeout = <span class=\"hljs-literal\">null</span><br>  <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"></span>) &#123;<br>    <span class=\"hljs-keyword\">if</span> (timeout === <span class=\"hljs-literal\">null</span>) &#123;<br>      fn.<span class=\"hljs-title function_\">apply</span>(<span class=\"hljs-variable language_\">this</span>, <span class=\"hljs-variable language_\">arguments</span>) <span class=\"hljs-comment\">// 使用apply让fn指向调用debounce的对象，不写将导致fn的this将指向window</span><br>    &#125;<br>    <span class=\"hljs-built_in\">clearTimeout</span>(timeout)<br>    timeout = <span class=\"hljs-built_in\">setTimeout</span>(<span class=\"hljs-function\">() =&gt;</span> &#123;<br>      timeout = <span class=\"hljs-literal\">null</span><br>    &#125;, <span class=\"hljs-number\">1000</span>)<br>  &#125;<br>&#125;<br><span class=\"hljs-keyword\">let</span> btn = <span class=\"hljs-variable language_\">document</span>.<span class=\"hljs-title function_\">getElementById</span>(<span class=\"hljs-string\">&#x27;debounce&#x27;</span>)<br>btn.<span class=\"hljs-title function_\">addEventListener</span>(<span class=\"hljs-string\">&#x27;click&#x27;</span>,<span class=\"hljs-title function_\">debounce</span>(sayHello),<span class=\"hljs-literal\">false</span>)<br></code></pre></td></tr></table></figure>\n\n<blockquote>\n<p>节流：高频事件触发，但在n秒内只会执行一次，所以节流会稀释函数的执行频率</p>\n</blockquote>\n<p>节流我们还是可以用 <code>setTimeout</code> 的方式来完成，定义一个延时标志，每次触发事件时都判断当前是否有等待执行的延时函数，有就继续等待，没有就再次调用</p>\n<p>实现代码如下：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript\"><span class=\"hljs-title function_\">sayHello</span>(<span class=\"hljs-params\"></span>) &#123;<br>  <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">&#x27;我被调用啦！！！&#x27;</span>)<br>&#125;<br><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">throttle</span>(<span class=\"hljs-params\">fn</span>) &#123;<br>  <span class=\"hljs-keyword\">let</span> run = <span class=\"hljs-literal\">false</span><br>  <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"></span>) &#123;<br>    <span class=\"hljs-keyword\">if</span> (run) &#123;<br>      <span class=\"hljs-keyword\">return</span><br>    &#125;<br>    fn.<span class=\"hljs-title function_\">apply</span>(<span class=\"hljs-variable language_\">this</span>, <span class=\"hljs-variable language_\">arguments</span>)<br>    run = <span class=\"hljs-literal\">true</span><br>    <span class=\"hljs-built_in\">setTimeout</span>(<span class=\"hljs-function\">() =&gt;</span> &#123;<br>      run = <span class=\"hljs-literal\">false</span><br>    &#125;, <span class=\"hljs-number\">1000</span>)<br>  &#125;<br>&#125;<br><span class=\"hljs-keyword\">let</span> btn = <span class=\"hljs-variable language_\">document</span>.<span class=\"hljs-title function_\">getElementById</span>(<span class=\"hljs-string\">&#x27;throttle&#x27;</span>)<br>btn.<span class=\"hljs-title function_\">addEventListener</span>(<span class=\"hljs-string\">&#x27;click&#x27;</span>,<span class=\"hljs-title function_\">throttle</span>(sayHello),<span class=\"hljs-literal\">false</span>)<br></code></pre></td></tr></table></figure>\n"},{"title":"call, bind, apply 的实现","date":"2022-10-27T02:24:10.000Z","_content":"\n公用示例代码:\n\n```javascript\nlet person = {\n  name: '小维',\n  job: '前端',\n  say(params) {\n    console.log(`${this.name}是一个${this.job}${params}`)\n  }\n}\n\nlet person2 = {\n  name: '小红',\n  job: '项目经理'\n}\n```\n\n> `call()` 方法使用一个指定的 `this` 值和单独给出的一个或多个参数来调用一个函数\n\n实现代码如下：\n\n```javascript\nFunction.prototype.MyCall = function (context, ...args) {\n  context = context || window // 判断this指向，有参数指向参数，无参数指向window\n  let fn = Symbol() // 定义一个方法名称，为了防止覆盖原来的方法，使用Symbol\n  context[fn] = this // 这里的this指向调用的方法，然后给传递过来的对象新增这个方法\n  let res = context[fn](...args) // 调用方法\n  delete context[fn] // 调用完之后删除新建的方法\n  return res\n}\n\nperson.say.MyCall(person2, '@') // 小红是一个项目经理@\n```\n\n> `apply()` 方法调用一个具有给定 `this` 值的函数，以及以一个数组（或一个类数组对象）的形式提供的参数\n\n从概念上看来，`call` 和 `apply` 非常相似，仅接受参数的形式不同，将接受多个参数改成数组即可，所以写起来也非常容易\n\n实现代码如下：\n\n```javascript\nFunction.prototype.MyApply = function (context, args) {\n  context = context || window // 判断this指向，有参数指向参数，无参数指向window\n  let fn = Symbol() // 定义一个方法名称，为了防止覆盖原来的方法，使用Symbol\n  context[fn] = this // 这里的this指向调用的方法，然后给传递过来的对象新增这个方法\n  let res = context[fn](...args) // 调用方法\n  delete context[fn] // 调用完之后删除新建的方法\n  return res\n}\n\nperson.say.MyApply(person2, ['$']) // 小红是一个项目经理$\n```\n\n> `bind()` 方法创建一个新的函数，在 `bind()` 被调用时，这个新函数的 `this` 被指定为 `bind()` 的第一个参数，而其余参数将作为新函数的参数，供调用时使用\n\n不同的是，`bind` 返回一个可调用的函数，我们可以之前返回之前写好的 `apply` 或者 `call` 即可\n\n实现代码如下：\n\n```javascript\nFunction.prototype.MyBind = function(context) {\n  context = context || window // 判断this指向，有参数指向参数，无参数指向window\n  let self = this // 返回一个绑定this的函数，我们需要在此保存this\n  // 返回一个函数\n  return function(...args) {\n    self.apply(context, args)\n  }\n}\n\nlet mb = person.say.MyBind(person2)\nmb('*') // 小红是一个项目经理*\n```\n","source":"_posts/call-bind-apply.md","raw":"---\ntitle: call, bind, apply 的实现\ndate: 2022-10-27  10:24:10\ntags: [JavaScript]\ncategory: 前端\n---\n\n公用示例代码:\n\n```javascript\nlet person = {\n  name: '小维',\n  job: '前端',\n  say(params) {\n    console.log(`${this.name}是一个${this.job}${params}`)\n  }\n}\n\nlet person2 = {\n  name: '小红',\n  job: '项目经理'\n}\n```\n\n> `call()` 方法使用一个指定的 `this` 值和单独给出的一个或多个参数来调用一个函数\n\n实现代码如下：\n\n```javascript\nFunction.prototype.MyCall = function (context, ...args) {\n  context = context || window // 判断this指向，有参数指向参数，无参数指向window\n  let fn = Symbol() // 定义一个方法名称，为了防止覆盖原来的方法，使用Symbol\n  context[fn] = this // 这里的this指向调用的方法，然后给传递过来的对象新增这个方法\n  let res = context[fn](...args) // 调用方法\n  delete context[fn] // 调用完之后删除新建的方法\n  return res\n}\n\nperson.say.MyCall(person2, '@') // 小红是一个项目经理@\n```\n\n> `apply()` 方法调用一个具有给定 `this` 值的函数，以及以一个数组（或一个类数组对象）的形式提供的参数\n\n从概念上看来，`call` 和 `apply` 非常相似，仅接受参数的形式不同，将接受多个参数改成数组即可，所以写起来也非常容易\n\n实现代码如下：\n\n```javascript\nFunction.prototype.MyApply = function (context, args) {\n  context = context || window // 判断this指向，有参数指向参数，无参数指向window\n  let fn = Symbol() // 定义一个方法名称，为了防止覆盖原来的方法，使用Symbol\n  context[fn] = this // 这里的this指向调用的方法，然后给传递过来的对象新增这个方法\n  let res = context[fn](...args) // 调用方法\n  delete context[fn] // 调用完之后删除新建的方法\n  return res\n}\n\nperson.say.MyApply(person2, ['$']) // 小红是一个项目经理$\n```\n\n> `bind()` 方法创建一个新的函数，在 `bind()` 被调用时，这个新函数的 `this` 被指定为 `bind()` 的第一个参数，而其余参数将作为新函数的参数，供调用时使用\n\n不同的是，`bind` 返回一个可调用的函数，我们可以之前返回之前写好的 `apply` 或者 `call` 即可\n\n实现代码如下：\n\n```javascript\nFunction.prototype.MyBind = function(context) {\n  context = context || window // 判断this指向，有参数指向参数，无参数指向window\n  let self = this // 返回一个绑定this的函数，我们需要在此保存this\n  // 返回一个函数\n  return function(...args) {\n    self.apply(context, args)\n  }\n}\n\nlet mb = person.say.MyBind(person2)\nmb('*') // 小红是一个项目经理*\n```\n","slug":"call-bind-apply","published":1,"updated":"2022-10-27T05:13:12.037Z","_id":"cl9pnl76f000064fg5at21j3i","comments":1,"layout":"post","photos":[],"link":"","content":"<p>公用示例代码:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript\"><span class=\"hljs-keyword\">let</span> person = &#123;<br>  <span class=\"hljs-attr\">name</span>: <span class=\"hljs-string\">&#x27;小维&#x27;</span>,<br>  <span class=\"hljs-attr\">job</span>: <span class=\"hljs-string\">&#x27;前端&#x27;</span>,<br>  <span class=\"hljs-title function_\">say</span>(<span class=\"hljs-params\">params</span>) &#123;<br>    <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">`<span class=\"hljs-subst\">$&#123;<span class=\"hljs-variable language_\">this</span>.name&#125;</span>是一个<span class=\"hljs-subst\">$&#123;<span class=\"hljs-variable language_\">this</span>.job&#125;</span><span class=\"hljs-subst\">$&#123;params&#125;</span>`</span>)<br>  &#125;<br>&#125;<br><br><span class=\"hljs-keyword\">let</span> person2 = &#123;<br>  <span class=\"hljs-attr\">name</span>: <span class=\"hljs-string\">&#x27;小红&#x27;</span>,<br>  <span class=\"hljs-attr\">job</span>: <span class=\"hljs-string\">&#x27;项目经理&#x27;</span><br>&#125;<br></code></pre></td></tr></table></figure>\n\n<blockquote>\n<p><code>call()</code> 方法使用一个指定的 <code>this</code> 值和单独给出的一个或多个参数来调用一个函数</p>\n</blockquote>\n<p>实现代码如下：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript\"><span class=\"hljs-title class_\">Function</span>.<span class=\"hljs-property\"><span class=\"hljs-keyword\">prototype</span></span>.<span class=\"hljs-property\">MyCall</span> = <span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">context, ...args</span>) &#123;<br>  context = context || <span class=\"hljs-variable language_\">window</span> <span class=\"hljs-comment\">// 判断this指向，有参数指向参数，无参数指向window</span><br>  <span class=\"hljs-keyword\">let</span> fn = <span class=\"hljs-title class_\">Symbol</span>() <span class=\"hljs-comment\">// 定义一个方法名称，为了防止覆盖原来的方法，使用Symbol</span><br>  context[fn] = <span class=\"hljs-variable language_\">this</span> <span class=\"hljs-comment\">// 这里的this指向调用的方法，然后给传递过来的对象新增这个方法</span><br>  <span class=\"hljs-keyword\">let</span> res = context[fn](...args) <span class=\"hljs-comment\">// 调用方法</span><br>  <span class=\"hljs-keyword\">delete</span> context[fn] <span class=\"hljs-comment\">// 调用完之后删除新建的方法</span><br>  <span class=\"hljs-keyword\">return</span> res<br>&#125;<br><br>person.<span class=\"hljs-property\">say</span>.<span class=\"hljs-title class_\">MyCall</span>(person2, <span class=\"hljs-string\">&#x27;@&#x27;</span>) <span class=\"hljs-comment\">// 小红是一个项目经理@</span><br></code></pre></td></tr></table></figure>\n\n<blockquote>\n<p><code>apply()</code> 方法调用一个具有给定 <code>this</code> 值的函数，以及以一个数组（或一个类数组对象）的形式提供的参数</p>\n</blockquote>\n<p>从概念上看来，<code>call</code> 和 <code>apply</code> 非常相似，仅接受参数的形式不同，将接受多个参数改成数组即可，所以写起来也非常容易</p>\n<p>实现代码如下：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript\"><span class=\"hljs-title class_\">Function</span>.<span class=\"hljs-property\"><span class=\"hljs-keyword\">prototype</span></span>.<span class=\"hljs-property\">MyApply</span> = <span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">context, args</span>) &#123;<br>  context = context || <span class=\"hljs-variable language_\">window</span> <span class=\"hljs-comment\">// 判断this指向，有参数指向参数，无参数指向window</span><br>  <span class=\"hljs-keyword\">let</span> fn = <span class=\"hljs-title class_\">Symbol</span>() <span class=\"hljs-comment\">// 定义一个方法名称，为了防止覆盖原来的方法，使用Symbol</span><br>  context[fn] = <span class=\"hljs-variable language_\">this</span> <span class=\"hljs-comment\">// 这里的this指向调用的方法，然后给传递过来的对象新增这个方法</span><br>  <span class=\"hljs-keyword\">let</span> res = context[fn](...args) <span class=\"hljs-comment\">// 调用方法</span><br>  <span class=\"hljs-keyword\">delete</span> context[fn] <span class=\"hljs-comment\">// 调用完之后删除新建的方法</span><br>  <span class=\"hljs-keyword\">return</span> res<br>&#125;<br><br>person.<span class=\"hljs-property\">say</span>.<span class=\"hljs-title class_\">MyApply</span>(person2, [<span class=\"hljs-string\">&#x27;$&#x27;</span>]) <span class=\"hljs-comment\">// 小红是一个项目经理$</span><br></code></pre></td></tr></table></figure>\n\n<blockquote>\n<p><code>bind()</code> 方法创建一个新的函数，在 <code>bind()</code> 被调用时，这个新函数的 <code>this</code> 被指定为 <code>bind()</code> 的第一个参数，而其余参数将作为新函数的参数，供调用时使用</p>\n</blockquote>\n<p>不同的是，<code>bind</code> 返回一个可调用的函数，我们可以之前返回之前写好的 <code>apply</code> 或者 <code>call</code> 即可</p>\n<p>实现代码如下：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript\"><span class=\"hljs-title class_\">Function</span>.<span class=\"hljs-property\"><span class=\"hljs-keyword\">prototype</span></span>.<span class=\"hljs-property\">MyBind</span> = <span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">context</span>) &#123;<br>  context = context || <span class=\"hljs-variable language_\">window</span> <span class=\"hljs-comment\">// 判断this指向，有参数指向参数，无参数指向window</span><br>  <span class=\"hljs-keyword\">let</span> self = <span class=\"hljs-variable language_\">this</span> <span class=\"hljs-comment\">// 返回一个绑定this的函数，我们需要在此保存this</span><br>  <span class=\"hljs-comment\">// 返回一个函数</span><br>  <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">...args</span>) &#123;<br>    self.<span class=\"hljs-title function_\">apply</span>(context, args)<br>  &#125;<br>&#125;<br><br><span class=\"hljs-keyword\">let</span> mb = person.<span class=\"hljs-property\">say</span>.<span class=\"hljs-title class_\">MyBind</span>(person2)<br><span class=\"hljs-title function_\">mb</span>(<span class=\"hljs-string\">&#x27;*&#x27;</span>) <span class=\"hljs-comment\">// 小红是一个项目经理*</span><br></code></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<p>公用示例代码:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript\"><span class=\"hljs-keyword\">let</span> person = &#123;<br>  <span class=\"hljs-attr\">name</span>: <span class=\"hljs-string\">&#x27;小维&#x27;</span>,<br>  <span class=\"hljs-attr\">job</span>: <span class=\"hljs-string\">&#x27;前端&#x27;</span>,<br>  <span class=\"hljs-title function_\">say</span>(<span class=\"hljs-params\">params</span>) &#123;<br>    <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">`<span class=\"hljs-subst\">$&#123;<span class=\"hljs-variable language_\">this</span>.name&#125;</span>是一个<span class=\"hljs-subst\">$&#123;<span class=\"hljs-variable language_\">this</span>.job&#125;</span><span class=\"hljs-subst\">$&#123;params&#125;</span>`</span>)<br>  &#125;<br>&#125;<br><br><span class=\"hljs-keyword\">let</span> person2 = &#123;<br>  <span class=\"hljs-attr\">name</span>: <span class=\"hljs-string\">&#x27;小红&#x27;</span>,<br>  <span class=\"hljs-attr\">job</span>: <span class=\"hljs-string\">&#x27;项目经理&#x27;</span><br>&#125;<br></code></pre></td></tr></table></figure>\n\n<blockquote>\n<p><code>call()</code> 方法使用一个指定的 <code>this</code> 值和单独给出的一个或多个参数来调用一个函数</p>\n</blockquote>\n<p>实现代码如下：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript\"><span class=\"hljs-title class_\">Function</span>.<span class=\"hljs-property\"><span class=\"hljs-keyword\">prototype</span></span>.<span class=\"hljs-property\">MyCall</span> = <span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">context, ...args</span>) &#123;<br>  context = context || <span class=\"hljs-variable language_\">window</span> <span class=\"hljs-comment\">// 判断this指向，有参数指向参数，无参数指向window</span><br>  <span class=\"hljs-keyword\">let</span> fn = <span class=\"hljs-title class_\">Symbol</span>() <span class=\"hljs-comment\">// 定义一个方法名称，为了防止覆盖原来的方法，使用Symbol</span><br>  context[fn] = <span class=\"hljs-variable language_\">this</span> <span class=\"hljs-comment\">// 这里的this指向调用的方法，然后给传递过来的对象新增这个方法</span><br>  <span class=\"hljs-keyword\">let</span> res = context[fn](...args) <span class=\"hljs-comment\">// 调用方法</span><br>  <span class=\"hljs-keyword\">delete</span> context[fn] <span class=\"hljs-comment\">// 调用完之后删除新建的方法</span><br>  <span class=\"hljs-keyword\">return</span> res<br>&#125;<br><br>person.<span class=\"hljs-property\">say</span>.<span class=\"hljs-title class_\">MyCall</span>(person2, <span class=\"hljs-string\">&#x27;@&#x27;</span>) <span class=\"hljs-comment\">// 小红是一个项目经理@</span><br></code></pre></td></tr></table></figure>\n\n<blockquote>\n<p><code>apply()</code> 方法调用一个具有给定 <code>this</code> 值的函数，以及以一个数组（或一个类数组对象）的形式提供的参数</p>\n</blockquote>\n<p>从概念上看来，<code>call</code> 和 <code>apply</code> 非常相似，仅接受参数的形式不同，将接受多个参数改成数组即可，所以写起来也非常容易</p>\n<p>实现代码如下：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript\"><span class=\"hljs-title class_\">Function</span>.<span class=\"hljs-property\"><span class=\"hljs-keyword\">prototype</span></span>.<span class=\"hljs-property\">MyApply</span> = <span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">context, args</span>) &#123;<br>  context = context || <span class=\"hljs-variable language_\">window</span> <span class=\"hljs-comment\">// 判断this指向，有参数指向参数，无参数指向window</span><br>  <span class=\"hljs-keyword\">let</span> fn = <span class=\"hljs-title class_\">Symbol</span>() <span class=\"hljs-comment\">// 定义一个方法名称，为了防止覆盖原来的方法，使用Symbol</span><br>  context[fn] = <span class=\"hljs-variable language_\">this</span> <span class=\"hljs-comment\">// 这里的this指向调用的方法，然后给传递过来的对象新增这个方法</span><br>  <span class=\"hljs-keyword\">let</span> res = context[fn](...args) <span class=\"hljs-comment\">// 调用方法</span><br>  <span class=\"hljs-keyword\">delete</span> context[fn] <span class=\"hljs-comment\">// 调用完之后删除新建的方法</span><br>  <span class=\"hljs-keyword\">return</span> res<br>&#125;<br><br>person.<span class=\"hljs-property\">say</span>.<span class=\"hljs-title class_\">MyApply</span>(person2, [<span class=\"hljs-string\">&#x27;$&#x27;</span>]) <span class=\"hljs-comment\">// 小红是一个项目经理$</span><br></code></pre></td></tr></table></figure>\n\n<blockquote>\n<p><code>bind()</code> 方法创建一个新的函数，在 <code>bind()</code> 被调用时，这个新函数的 <code>this</code> 被指定为 <code>bind()</code> 的第一个参数，而其余参数将作为新函数的参数，供调用时使用</p>\n</blockquote>\n<p>不同的是，<code>bind</code> 返回一个可调用的函数，我们可以之前返回之前写好的 <code>apply</code> 或者 <code>call</code> 即可</p>\n<p>实现代码如下：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript\"><span class=\"hljs-title class_\">Function</span>.<span class=\"hljs-property\"><span class=\"hljs-keyword\">prototype</span></span>.<span class=\"hljs-property\">MyBind</span> = <span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">context</span>) &#123;<br>  context = context || <span class=\"hljs-variable language_\">window</span> <span class=\"hljs-comment\">// 判断this指向，有参数指向参数，无参数指向window</span><br>  <span class=\"hljs-keyword\">let</span> self = <span class=\"hljs-variable language_\">this</span> <span class=\"hljs-comment\">// 返回一个绑定this的函数，我们需要在此保存this</span><br>  <span class=\"hljs-comment\">// 返回一个函数</span><br>  <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">...args</span>) &#123;<br>    self.<span class=\"hljs-title function_\">apply</span>(context, args)<br>  &#125;<br>&#125;<br><br><span class=\"hljs-keyword\">let</span> mb = person.<span class=\"hljs-property\">say</span>.<span class=\"hljs-title class_\">MyBind</span>(person2)<br><span class=\"hljs-title function_\">mb</span>(<span class=\"hljs-string\">&#x27;*&#x27;</span>) <span class=\"hljs-comment\">// 小红是一个项目经理*</span><br></code></pre></td></tr></table></figure>\n"},{"title":"组合继承的实现","date":"2022-10-27T02:24:10.000Z","_content":"\n组合继承就是使用原型链继承原型上的属性和方法，通过盗用构造函数继承实例的属性。这样做的好处是既可以把方法定义在原型上实现重用，又可以让每个实例拥有自己的属性\n\n实现代码如下：\n\n```javascript\nfunction Parent(name, age) {\n  this.name = name\n  this.age = age\n  this.house = 150\n}\nParent.prototype.sayHi = () => {\n  console.log('hello world !')\n}\n\nfunction Children(name, age) {\n  Parent.call(this, name, age) // 盗用构造函数的方法继承实例的属性，解决了原型链继承不能向父类传参的缺点和引用类型共享的问题\n}\nChildren.prototype = Object.create(Parent.prototype) // new Parent() // 原型链继承实现了方法的重用\n// 关于这个改用Object.create(),而不是使用new Parent是因为new操作会使用Parent的构造函数调用，如果Parent中存在副作用就会影响到Children的后代\nChildren.prototype.constructor = Children\n\nlet xiaowei = new Children('小维', 18)\n\nconsole.log(xiaowei) // Children { name: '小维', age: 18, house: 150 }\nxiaowei.sayHi() // hello world !\nconsole.log(xiaowei instanceof Children) // true\nconsole.log(xiaowei instanceof Parent) // true\n```\n","source":"_posts/composition-extend.md","raw":"---\ntitle: 组合继承的实现\ndate: 2022-10-27  10:24:10\ntags: [JavaScript ]\ncategory: 前端\n---\n\n组合继承就是使用原型链继承原型上的属性和方法，通过盗用构造函数继承实例的属性。这样做的好处是既可以把方法定义在原型上实现重用，又可以让每个实例拥有自己的属性\n\n实现代码如下：\n\n```javascript\nfunction Parent(name, age) {\n  this.name = name\n  this.age = age\n  this.house = 150\n}\nParent.prototype.sayHi = () => {\n  console.log('hello world !')\n}\n\nfunction Children(name, age) {\n  Parent.call(this, name, age) // 盗用构造函数的方法继承实例的属性，解决了原型链继承不能向父类传参的缺点和引用类型共享的问题\n}\nChildren.prototype = Object.create(Parent.prototype) // new Parent() // 原型链继承实现了方法的重用\n// 关于这个改用Object.create(),而不是使用new Parent是因为new操作会使用Parent的构造函数调用，如果Parent中存在副作用就会影响到Children的后代\nChildren.prototype.constructor = Children\n\nlet xiaowei = new Children('小维', 18)\n\nconsole.log(xiaowei) // Children { name: '小维', age: 18, house: 150 }\nxiaowei.sayHi() // hello world !\nconsole.log(xiaowei instanceof Children) // true\nconsole.log(xiaowei instanceof Parent) // true\n```\n","slug":"composition-extend","published":1,"updated":"2022-11-14T04:15:06.528Z","_id":"cl9pnl76r000664fge2pnaaom","comments":1,"layout":"post","photos":[],"link":"","content":"<p>组合继承就是使用原型链继承原型上的属性和方法，通过盗用构造函数继承实例的属性。这样做的好处是既可以把方法定义在原型上实现重用，又可以让每个实例拥有自己的属性</p>\n<p>实现代码如下：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">Parent</span>(<span class=\"hljs-params\">name, age</span>) &#123;<br>  <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">name</span> = name<br>  <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">age</span> = age<br>  <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">house</span> = <span class=\"hljs-number\">150</span><br>&#125;<br><span class=\"hljs-title class_\">Parent</span>.<span class=\"hljs-property\"><span class=\"hljs-keyword\">prototype</span></span>.<span class=\"hljs-property\">sayHi</span> = <span class=\"hljs-function\">() =&gt;</span> &#123;<br>  <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">&#x27;hello world !&#x27;</span>)<br>&#125;<br><br><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">Children</span>(<span class=\"hljs-params\">name, age</span>) &#123;<br>  <span class=\"hljs-title class_\">Parent</span>.<span class=\"hljs-title function_\">call</span>(<span class=\"hljs-variable language_\">this</span>, name, age) <span class=\"hljs-comment\">// 盗用构造函数的方法继承实例的属性，解决了原型链继承不能向父类传参的缺点和引用类型共享的问题</span><br>&#125;<br><span class=\"hljs-title class_\">Children</span>.<span class=\"hljs-property\"><span class=\"hljs-keyword\">prototype</span></span> = <span class=\"hljs-title class_\">Object</span>.<span class=\"hljs-title function_\">create</span>(<span class=\"hljs-title class_\">Parent</span>.<span class=\"hljs-property\"><span class=\"hljs-keyword\">prototype</span></span>) <span class=\"hljs-comment\">// new Parent() // 原型链继承实现了方法的重用</span><br><span class=\"hljs-comment\">// 关于这个改用Object.create(),而不是使用new Parent是因为new操作会使用Parent的构造函数调用，如果Parent中存在副作用就会影响到Children的后代</span><br><span class=\"hljs-title class_\">Children</span>.<span class=\"hljs-property\"><span class=\"hljs-keyword\">prototype</span></span>.<span class=\"hljs-property\">constructor</span> = <span class=\"hljs-title class_\">Children</span><br><br><span class=\"hljs-keyword\">let</span> xiaowei = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Children</span>(<span class=\"hljs-string\">&#x27;小维&#x27;</span>, <span class=\"hljs-number\">18</span>)<br><br><span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(xiaowei) <span class=\"hljs-comment\">// Children &#123; name: &#x27;小维&#x27;, age: 18, house: 150 &#125;</span><br>xiaowei.<span class=\"hljs-title function_\">sayHi</span>() <span class=\"hljs-comment\">// hello world !</span><br><span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(xiaowei <span class=\"hljs-keyword\">instanceof</span> <span class=\"hljs-title class_\">Children</span>) <span class=\"hljs-comment\">// true</span><br><span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(xiaowei <span class=\"hljs-keyword\">instanceof</span> <span class=\"hljs-title class_\">Parent</span>) <span class=\"hljs-comment\">// true</span><br></code></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<p>组合继承就是使用原型链继承原型上的属性和方法，通过盗用构造函数继承实例的属性。这样做的好处是既可以把方法定义在原型上实现重用，又可以让每个实例拥有自己的属性</p>\n<p>实现代码如下：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">Parent</span>(<span class=\"hljs-params\">name, age</span>) &#123;<br>  <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">name</span> = name<br>  <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">age</span> = age<br>  <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">house</span> = <span class=\"hljs-number\">150</span><br>&#125;<br><span class=\"hljs-title class_\">Parent</span>.<span class=\"hljs-property\"><span class=\"hljs-keyword\">prototype</span></span>.<span class=\"hljs-property\">sayHi</span> = <span class=\"hljs-function\">() =&gt;</span> &#123;<br>  <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">&#x27;hello world !&#x27;</span>)<br>&#125;<br><br><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">Children</span>(<span class=\"hljs-params\">name, age</span>) &#123;<br>  <span class=\"hljs-title class_\">Parent</span>.<span class=\"hljs-title function_\">call</span>(<span class=\"hljs-variable language_\">this</span>, name, age) <span class=\"hljs-comment\">// 盗用构造函数的方法继承实例的属性，解决了原型链继承不能向父类传参的缺点和引用类型共享的问题</span><br>&#125;<br><span class=\"hljs-title class_\">Children</span>.<span class=\"hljs-property\"><span class=\"hljs-keyword\">prototype</span></span> = <span class=\"hljs-title class_\">Object</span>.<span class=\"hljs-title function_\">create</span>(<span class=\"hljs-title class_\">Parent</span>.<span class=\"hljs-property\"><span class=\"hljs-keyword\">prototype</span></span>) <span class=\"hljs-comment\">// new Parent() // 原型链继承实现了方法的重用</span><br><span class=\"hljs-comment\">// 关于这个改用Object.create(),而不是使用new Parent是因为new操作会使用Parent的构造函数调用，如果Parent中存在副作用就会影响到Children的后代</span><br><span class=\"hljs-title class_\">Children</span>.<span class=\"hljs-property\"><span class=\"hljs-keyword\">prototype</span></span>.<span class=\"hljs-property\">constructor</span> = <span class=\"hljs-title class_\">Children</span><br><br><span class=\"hljs-keyword\">let</span> xiaowei = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Children</span>(<span class=\"hljs-string\">&#x27;小维&#x27;</span>, <span class=\"hljs-number\">18</span>)<br><br><span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(xiaowei) <span class=\"hljs-comment\">// Children &#123; name: &#x27;小维&#x27;, age: 18, house: 150 &#125;</span><br>xiaowei.<span class=\"hljs-title function_\">sayHi</span>() <span class=\"hljs-comment\">// hello world !</span><br><span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(xiaowei <span class=\"hljs-keyword\">instanceof</span> <span class=\"hljs-title class_\">Children</span>) <span class=\"hljs-comment\">// true</span><br><span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(xiaowei <span class=\"hljs-keyword\">instanceof</span> <span class=\"hljs-title class_\">Parent</span>) <span class=\"hljs-comment\">// true</span><br></code></pre></td></tr></table></figure>\n"},{"title":"使用 CSS 画三角形","date":"2022-10-26T15:48:35.000Z","_content":"\n三角形是我们网页中比较常见的元素，比如下拉菜单，折叠面板等都有一个三角形的指示器，我们今天就使用 `CSS` 来实现这样的一个形状\n\n不少细心~~无聊~~的人应该都有发现，当我们把元素的宽高设置为 0，然后给元素加上等宽的 `border` 我们就可以得到一个正方形，如果我们给 `border` 的四边不同的颜色我们就可以得到一个三角形\n\n实现代码如下：\n\n```javascript\n<div class=\"box\"></div>\n\n.box {\n  width: 0;\n  height: 0;\n  border: 50px solid black;\n  border-top-color: red;\n  border-left-color: blue;\n  border-right-color: green;\n}\n```\n\n效果如下：\n\n![image-20221027000543562](https://raw.githubusercontent.com/VaynePeng/images/master/note/202210270005626.png)\n\n到了这里，小伙伴们应该都已经发现了，如果此时我们把一边设置某种颜色，其他边设置透明，那么我们就可以得到一个三角形了\n\n实现代码如下：\n\n```javascript\n<div class=\"box\"></div>\n\n.box {\n  width: 0;\n  height: 0;\n  border: 50px solid transparent;\n  border-top-color: red;\n}\n```\n\n效果如下：\n\n![image-20221027000959504](https://raw.githubusercontent.com/VaynePeng/images/master/note/202210270009520.png)\n\n好了，到这里我们的三角形就已经画好了，其实 `border` 还会根据作用元素的形状改变自身的形状，当元素为正方形时，`border` 为一个梯形，当元素为圆形时，`border` 为一个扇形，到这里不如动手去试试更多可能性吧\n","source":"_posts/draw-triangle.md","raw":"---\ntitle: 使用 CSS 画三角形\ndate: 2022-10-26  23:48:35\ntags: [CSS, HTML]\ncategory: 前端\n---\n\n三角形是我们网页中比较常见的元素，比如下拉菜单，折叠面板等都有一个三角形的指示器，我们今天就使用 `CSS` 来实现这样的一个形状\n\n不少细心~~无聊~~的人应该都有发现，当我们把元素的宽高设置为 0，然后给元素加上等宽的 `border` 我们就可以得到一个正方形，如果我们给 `border` 的四边不同的颜色我们就可以得到一个三角形\n\n实现代码如下：\n\n```javascript\n<div class=\"box\"></div>\n\n.box {\n  width: 0;\n  height: 0;\n  border: 50px solid black;\n  border-top-color: red;\n  border-left-color: blue;\n  border-right-color: green;\n}\n```\n\n效果如下：\n\n![image-20221027000543562](https://raw.githubusercontent.com/VaynePeng/images/master/note/202210270005626.png)\n\n到了这里，小伙伴们应该都已经发现了，如果此时我们把一边设置某种颜色，其他边设置透明，那么我们就可以得到一个三角形了\n\n实现代码如下：\n\n```javascript\n<div class=\"box\"></div>\n\n.box {\n  width: 0;\n  height: 0;\n  border: 50px solid transparent;\n  border-top-color: red;\n}\n```\n\n效果如下：\n\n![image-20221027000959504](https://raw.githubusercontent.com/VaynePeng/images/master/note/202210270009520.png)\n\n好了，到这里我们的三角形就已经画好了，其实 `border` 还会根据作用元素的形状改变自身的形状，当元素为正方形时，`border` 为一个梯形，当元素为圆形时，`border` 为一个扇形，到这里不如动手去试试更多可能性吧\n","slug":"draw-triangle","published":1,"updated":"2022-11-17T19:48:53.703Z","_id":"cl9pwc65n0000f4fgc5un5g06","comments":1,"layout":"post","photos":[],"link":"","content":"<p>三角形是我们网页中比较常见的元素，比如下拉菜单，折叠面板等都有一个三角形的指示器，我们今天就使用 <code>CSS</code> 来实现这样的一个形状</p>\n<p>不少细心<del>无聊</del>的人应该都有发现，当我们把元素的宽高设置为 0，然后给元素加上等宽的 <code>border</code> 我们就可以得到一个正方形，如果我们给 <code>border</code> 的四边不同的颜色我们就可以得到一个三角形</p>\n<p>实现代码如下：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript\">&lt;div <span class=\"hljs-keyword\">class</span>=<span class=\"hljs-string\">&quot;box&quot;</span>&gt;&lt;/div&gt;<br><br>.<span class=\"hljs-property\">box</span> &#123;<br>  <span class=\"hljs-attr\">width</span>: <span class=\"hljs-number\">0</span>;<br>  <span class=\"hljs-attr\">height</span>: <span class=\"hljs-number\">0</span>;<br>  <span class=\"hljs-attr\">border</span>: 50px solid black;<br>  border-top-<span class=\"hljs-attr\">color</span>: red;<br>  border-left-<span class=\"hljs-attr\">color</span>: blue;<br>  border-right-<span class=\"hljs-attr\">color</span>: green;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p>效果如下：</p>\n<p><img src=\"https://raw.githubusercontent.com/VaynePeng/images/master/note/202210270005626.png\" alt=\"image-20221027000543562\"></p>\n<p>到了这里，小伙伴们应该都已经发现了，如果此时我们把一边设置某种颜色，其他边设置透明，那么我们就可以得到一个三角形了</p>\n<p>实现代码如下：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript\">&lt;div <span class=\"hljs-keyword\">class</span>=<span class=\"hljs-string\">&quot;box&quot;</span>&gt;&lt;/div&gt;<br><br>.<span class=\"hljs-property\">box</span> &#123;<br>  <span class=\"hljs-attr\">width</span>: <span class=\"hljs-number\">0</span>;<br>  <span class=\"hljs-attr\">height</span>: <span class=\"hljs-number\">0</span>;<br>  <span class=\"hljs-attr\">border</span>: 50px solid transparent;<br>  border-top-<span class=\"hljs-attr\">color</span>: red;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p>效果如下：</p>\n<p><img src=\"https://raw.githubusercontent.com/VaynePeng/images/master/note/202210270009520.png\" alt=\"image-20221027000959504\"></p>\n<p>好了，到这里我们的三角形就已经画好了，其实 <code>border</code> 还会根据作用元素的形状改变自身的形状，当元素为正方形时，<code>border</code> 为一个梯形，当元素为圆形时，<code>border</code> 为一个扇形，到这里不如动手去试试更多可能性吧</p>\n","site":{"data":{}},"excerpt":"","more":"<p>三角形是我们网页中比较常见的元素，比如下拉菜单，折叠面板等都有一个三角形的指示器，我们今天就使用 <code>CSS</code> 来实现这样的一个形状</p>\n<p>不少细心<del>无聊</del>的人应该都有发现，当我们把元素的宽高设置为 0，然后给元素加上等宽的 <code>border</code> 我们就可以得到一个正方形，如果我们给 <code>border</code> 的四边不同的颜色我们就可以得到一个三角形</p>\n<p>实现代码如下：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript\">&lt;div <span class=\"hljs-keyword\">class</span>=<span class=\"hljs-string\">&quot;box&quot;</span>&gt;&lt;/div&gt;<br><br>.<span class=\"hljs-property\">box</span> &#123;<br>  <span class=\"hljs-attr\">width</span>: <span class=\"hljs-number\">0</span>;<br>  <span class=\"hljs-attr\">height</span>: <span class=\"hljs-number\">0</span>;<br>  <span class=\"hljs-attr\">border</span>: 50px solid black;<br>  border-top-<span class=\"hljs-attr\">color</span>: red;<br>  border-left-<span class=\"hljs-attr\">color</span>: blue;<br>  border-right-<span class=\"hljs-attr\">color</span>: green;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p>效果如下：</p>\n<p><img src=\"https://raw.githubusercontent.com/VaynePeng/images/master/note/202210270005626.png\" alt=\"image-20221027000543562\"></p>\n<p>到了这里，小伙伴们应该都已经发现了，如果此时我们把一边设置某种颜色，其他边设置透明，那么我们就可以得到一个三角形了</p>\n<p>实现代码如下：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript\">&lt;div <span class=\"hljs-keyword\">class</span>=<span class=\"hljs-string\">&quot;box&quot;</span>&gt;&lt;/div&gt;<br><br>.<span class=\"hljs-property\">box</span> &#123;<br>  <span class=\"hljs-attr\">width</span>: <span class=\"hljs-number\">0</span>;<br>  <span class=\"hljs-attr\">height</span>: <span class=\"hljs-number\">0</span>;<br>  <span class=\"hljs-attr\">border</span>: 50px solid transparent;<br>  border-top-<span class=\"hljs-attr\">color</span>: red;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p>效果如下：</p>\n<p><img src=\"https://raw.githubusercontent.com/VaynePeng/images/master/note/202210270009520.png\" alt=\"image-20221027000959504\"></p>\n<p>好了，到这里我们的三角形就已经画好了，其实 <code>border</code> 还会根据作用元素的形状改变自身的形状，当元素为正方形时，<code>border</code> 为一个梯形，当元素为圆形时，<code>border</code> 为一个扇形，到这里不如动手去试试更多可能性吧</p>\n"},{"title":"forEach 和 map 的实现","date":"2022-10-26T16:19:55.000Z","_content":"\n> `forEach()` 方法对数组的每个元素执行一次给定的函数\n\n实现代码如下：\n\n```javascript\nfunction _forEach(callback, thisArg) {\n  let index = 0\n  while (this.length > index) {\n    let element = this[index]\n    callback.call(thisArg, element, index, this)\n    index++\n  }\n}\n\nArray.prototype._forEach = _forEach\n```\n\n从上面的代码中我们不难看出，为什么 `forEach` 不能被 `return` 语句打断，我们传入的 `return` 只是终止了里面的 `callback` 函数，而外面的循环依旧在进行，对于需要提前终止循环的操作我建议都使用 `for...in...`, `for...of...` 等可以很优雅打断的遍历方式，如不是强行使用 `throw new Error()` 的方式来中断他的运行\n\n> `map()` 方法创建一个新数组，这个新数组由原数组中的每个元素都调用一次提供的函数后的返回值组成\n\n有了上面的 `forEach` 我们只需要稍微改造一下就可以实现 `map` 了\n\n实现代码如下：\n\n```javascript\nfunction _map(callback, thisArg) {\n  let index = 0\n  let array = []\n  while (this.length > index) {\n    let element = this[index]\n    let item = callback.call(thisArg, element, index, this)\n    array.push(item)\n    index++\n  }\n  return array\n}\n\nArray.prototype._map = _map\n```\n","source":"_posts/foreach-map.md","raw":"---\ntitle: forEach 和 map 的实现\ndate: 2022-10-27  0:19:55\ntags: [JavaScript]\ncategory: 前端\n---\n\n> `forEach()` 方法对数组的每个元素执行一次给定的函数\n\n实现代码如下：\n\n```javascript\nfunction _forEach(callback, thisArg) {\n  let index = 0\n  while (this.length > index) {\n    let element = this[index]\n    callback.call(thisArg, element, index, this)\n    index++\n  }\n}\n\nArray.prototype._forEach = _forEach\n```\n\n从上面的代码中我们不难看出，为什么 `forEach` 不能被 `return` 语句打断，我们传入的 `return` 只是终止了里面的 `callback` 函数，而外面的循环依旧在进行，对于需要提前终止循环的操作我建议都使用 `for...in...`, `for...of...` 等可以很优雅打断的遍历方式，如不是强行使用 `throw new Error()` 的方式来中断他的运行\n\n> `map()` 方法创建一个新数组，这个新数组由原数组中的每个元素都调用一次提供的函数后的返回值组成\n\n有了上面的 `forEach` 我们只需要稍微改造一下就可以实现 `map` 了\n\n实现代码如下：\n\n```javascript\nfunction _map(callback, thisArg) {\n  let index = 0\n  let array = []\n  while (this.length > index) {\n    let element = this[index]\n    let item = callback.call(thisArg, element, index, this)\n    array.push(item)\n    index++\n  }\n  return array\n}\n\nArray.prototype._map = _map\n```\n","slug":"foreach-map","published":1,"updated":"2022-10-27T05:13:12.041Z","_id":"cl9pwc65o0001f4fg14q9gaxk","comments":1,"layout":"post","photos":[],"link":"","content":"<blockquote>\n<p><code>forEach()</code> 方法对数组的每个元素执行一次给定的函数</p>\n</blockquote>\n<p>实现代码如下：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">_forEach</span>(<span class=\"hljs-params\">callback, thisArg</span>) &#123;<br>  <span class=\"hljs-keyword\">let</span> index = <span class=\"hljs-number\">0</span><br>  <span class=\"hljs-keyword\">while</span> (<span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">length</span> &gt; index) &#123;<br>    <span class=\"hljs-keyword\">let</span> element = <span class=\"hljs-variable language_\">this</span>[index]<br>    callback.<span class=\"hljs-title function_\">call</span>(thisArg, element, index, <span class=\"hljs-variable language_\">this</span>)<br>    index++<br>  &#125;<br>&#125;<br><br><span class=\"hljs-title class_\">Array</span>.<span class=\"hljs-property\"><span class=\"hljs-keyword\">prototype</span></span>.<span class=\"hljs-property\">_forEach</span> = _forEach<br></code></pre></td></tr></table></figure>\n\n<p>从上面的代码中我们不难看出，为什么 <code>forEach</code> 不能被 <code>return</code> 语句打断，我们传入的 <code>return</code> 只是终止了里面的 <code>callback</code> 函数，而外面的循环依旧在进行，对于需要提前终止循环的操作我建议都使用 <code>for...in...</code>, <code>for...of...</code> 等可以很优雅打断的遍历方式，如不是强行使用 <code>throw new Error()</code> 的方式来中断他的运行</p>\n<blockquote>\n<p><code>map()</code> 方法创建一个新数组，这个新数组由原数组中的每个元素都调用一次提供的函数后的返回值组成</p>\n</blockquote>\n<p>有了上面的 <code>forEach</code> 我们只需要稍微改造一下就可以实现 <code>map</code> 了</p>\n<p>实现代码如下：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">_map</span>(<span class=\"hljs-params\">callback, thisArg</span>) &#123;<br>  <span class=\"hljs-keyword\">let</span> index = <span class=\"hljs-number\">0</span><br>  <span class=\"hljs-keyword\">let</span> array = []<br>  <span class=\"hljs-keyword\">while</span> (<span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">length</span> &gt; index) &#123;<br>    <span class=\"hljs-keyword\">let</span> element = <span class=\"hljs-variable language_\">this</span>[index]<br>    <span class=\"hljs-keyword\">let</span> item = callback.<span class=\"hljs-title function_\">call</span>(thisArg, element, index, <span class=\"hljs-variable language_\">this</span>)<br>    array.<span class=\"hljs-title function_\">push</span>(item)<br>    index++<br>  &#125;<br>  <span class=\"hljs-keyword\">return</span> array<br>&#125;<br><br><span class=\"hljs-title class_\">Array</span>.<span class=\"hljs-property\"><span class=\"hljs-keyword\">prototype</span></span>.<span class=\"hljs-property\">_map</span> = _map<br></code></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<blockquote>\n<p><code>forEach()</code> 方法对数组的每个元素执行一次给定的函数</p>\n</blockquote>\n<p>实现代码如下：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">_forEach</span>(<span class=\"hljs-params\">callback, thisArg</span>) &#123;<br>  <span class=\"hljs-keyword\">let</span> index = <span class=\"hljs-number\">0</span><br>  <span class=\"hljs-keyword\">while</span> (<span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">length</span> &gt; index) &#123;<br>    <span class=\"hljs-keyword\">let</span> element = <span class=\"hljs-variable language_\">this</span>[index]<br>    callback.<span class=\"hljs-title function_\">call</span>(thisArg, element, index, <span class=\"hljs-variable language_\">this</span>)<br>    index++<br>  &#125;<br>&#125;<br><br><span class=\"hljs-title class_\">Array</span>.<span class=\"hljs-property\"><span class=\"hljs-keyword\">prototype</span></span>.<span class=\"hljs-property\">_forEach</span> = _forEach<br></code></pre></td></tr></table></figure>\n\n<p>从上面的代码中我们不难看出，为什么 <code>forEach</code> 不能被 <code>return</code> 语句打断，我们传入的 <code>return</code> 只是终止了里面的 <code>callback</code> 函数，而外面的循环依旧在进行，对于需要提前终止循环的操作我建议都使用 <code>for...in...</code>, <code>for...of...</code> 等可以很优雅打断的遍历方式，如不是强行使用 <code>throw new Error()</code> 的方式来中断他的运行</p>\n<blockquote>\n<p><code>map()</code> 方法创建一个新数组，这个新数组由原数组中的每个元素都调用一次提供的函数后的返回值组成</p>\n</blockquote>\n<p>有了上面的 <code>forEach</code> 我们只需要稍微改造一下就可以实现 <code>map</code> 了</p>\n<p>实现代码如下：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">_map</span>(<span class=\"hljs-params\">callback, thisArg</span>) &#123;<br>  <span class=\"hljs-keyword\">let</span> index = <span class=\"hljs-number\">0</span><br>  <span class=\"hljs-keyword\">let</span> array = []<br>  <span class=\"hljs-keyword\">while</span> (<span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">length</span> &gt; index) &#123;<br>    <span class=\"hljs-keyword\">let</span> element = <span class=\"hljs-variable language_\">this</span>[index]<br>    <span class=\"hljs-keyword\">let</span> item = callback.<span class=\"hljs-title function_\">call</span>(thisArg, element, index, <span class=\"hljs-variable language_\">this</span>)<br>    array.<span class=\"hljs-title function_\">push</span>(item)<br>    index++<br>  &#125;<br>  <span class=\"hljs-keyword\">return</span> array<br>&#125;<br><br><span class=\"hljs-title class_\">Array</span>.<span class=\"hljs-property\"><span class=\"hljs-keyword\">prototype</span></span>.<span class=\"hljs-property\">_map</span> = _map<br></code></pre></td></tr></table></figure>\n"},{"title":"new 运算符的实现","date":"2022-10-26T15:33:25.000Z","_content":"\n> `new` 运算符创建一个用户定义的对象类型的实例或具有构造函数的内置对象的实例\n\n\n`new` 关键字会进行如下的操作：\n\n- 创建一个空的简单 `JavaScript` 对象（即{}）\n- 链接该对象（设置该对象的 `constructor`）到另一个对象\n- 将步骤1新创建的对象作为 `this` 的上下文\n- 如果该函数没有返回对象，则返回 `this`\n\n实现代码如下：\n\n```javascript\nfunction Parent(name, age) {\n  this.name = name\n  this.age = age\n}\n\nParent.prototype.sayName = function () {\n  return this.name\n}\n\nfunction myNew(fn, ...args) {\n  let obj = {}\n  obj.__proto__ = fn.prototype\n  let res = fn.apply(obj, args)\n  return typeof res === 'object' ? res : obj\n}\n\nlet children = myNew(Parent, '小维', 18)\n\nconsole.log(children)\n```\n","source":"_posts/new-operator.md","raw":"---\ntitle: new 运算符的实现\ndate: 2022-10-26  23:33:25\ntags: [JavaScript]\ncategory: 前端\n---\n\n> `new` 运算符创建一个用户定义的对象类型的实例或具有构造函数的内置对象的实例\n\n\n`new` 关键字会进行如下的操作：\n\n- 创建一个空的简单 `JavaScript` 对象（即{}）\n- 链接该对象（设置该对象的 `constructor`）到另一个对象\n- 将步骤1新创建的对象作为 `this` 的上下文\n- 如果该函数没有返回对象，则返回 `this`\n\n实现代码如下：\n\n```javascript\nfunction Parent(name, age) {\n  this.name = name\n  this.age = age\n}\n\nParent.prototype.sayName = function () {\n  return this.name\n}\n\nfunction myNew(fn, ...args) {\n  let obj = {}\n  obj.__proto__ = fn.prototype\n  let res = fn.apply(obj, args)\n  return typeof res === 'object' ? res : obj\n}\n\nlet children = myNew(Parent, '小维', 18)\n\nconsole.log(children)\n```\n","slug":"new-operator","published":1,"updated":"2022-11-17T04:05:10.269Z","_id":"cl9pwc65q0003f4fg87hx61nc","comments":1,"layout":"post","photos":[],"link":"","content":"<blockquote>\n<p><code>new</code> 运算符创建一个用户定义的对象类型的实例或具有构造函数的内置对象的实例</p>\n</blockquote>\n<p><code>new</code> 关键字会进行如下的操作：</p>\n<ul>\n<li>创建一个空的简单 <code>JavaScript</code> 对象（即{}）</li>\n<li>链接该对象（设置该对象的 <code>constructor</code>）到另一个对象</li>\n<li>将步骤1新创建的对象作为 <code>this</code> 的上下文</li>\n<li>如果该函数没有返回对象，则返回 <code>this</code></li>\n</ul>\n<p>实现代码如下：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">Parent</span>(<span class=\"hljs-params\">name, age</span>) &#123;<br>  <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">name</span> = name<br>  <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">age</span> = age<br>&#125;<br><br><span class=\"hljs-title class_\">Parent</span>.<span class=\"hljs-property\"><span class=\"hljs-keyword\">prototype</span></span>.<span class=\"hljs-property\">sayName</span> = <span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"></span>) &#123;<br>  <span class=\"hljs-keyword\">return</span> <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">name</span><br>&#125;<br><br><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">myNew</span>(<span class=\"hljs-params\">fn, ...args</span>) &#123;<br>  <span class=\"hljs-keyword\">let</span> obj = &#123;&#125;<br>  obj.<span class=\"hljs-property\">__proto__</span> = fn.<span class=\"hljs-property\"><span class=\"hljs-keyword\">prototype</span></span><br>  <span class=\"hljs-keyword\">let</span> res = fn.<span class=\"hljs-title function_\">apply</span>(obj, args)<br>  <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">typeof</span> res === <span class=\"hljs-string\">&#x27;object&#x27;</span> ? res : obj<br>&#125;<br><br><span class=\"hljs-keyword\">let</span> children = <span class=\"hljs-title function_\">myNew</span>(<span class=\"hljs-title class_\">Parent</span>, <span class=\"hljs-string\">&#x27;小维&#x27;</span>, <span class=\"hljs-number\">18</span>)<br><br><span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(children)<br></code></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<blockquote>\n<p><code>new</code> 运算符创建一个用户定义的对象类型的实例或具有构造函数的内置对象的实例</p>\n</blockquote>\n<p><code>new</code> 关键字会进行如下的操作：</p>\n<ul>\n<li>创建一个空的简单 <code>JavaScript</code> 对象（即{}）</li>\n<li>链接该对象（设置该对象的 <code>constructor</code>）到另一个对象</li>\n<li>将步骤1新创建的对象作为 <code>this</code> 的上下文</li>\n<li>如果该函数没有返回对象，则返回 <code>this</code></li>\n</ul>\n<p>实现代码如下：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">Parent</span>(<span class=\"hljs-params\">name, age</span>) &#123;<br>  <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">name</span> = name<br>  <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">age</span> = age<br>&#125;<br><br><span class=\"hljs-title class_\">Parent</span>.<span class=\"hljs-property\"><span class=\"hljs-keyword\">prototype</span></span>.<span class=\"hljs-property\">sayName</span> = <span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"></span>) &#123;<br>  <span class=\"hljs-keyword\">return</span> <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">name</span><br>&#125;<br><br><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">myNew</span>(<span class=\"hljs-params\">fn, ...args</span>) &#123;<br>  <span class=\"hljs-keyword\">let</span> obj = &#123;&#125;<br>  obj.<span class=\"hljs-property\">__proto__</span> = fn.<span class=\"hljs-property\"><span class=\"hljs-keyword\">prototype</span></span><br>  <span class=\"hljs-keyword\">let</span> res = fn.<span class=\"hljs-title function_\">apply</span>(obj, args)<br>  <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">typeof</span> res === <span class=\"hljs-string\">&#x27;object&#x27;</span> ? res : obj<br>&#125;<br><br><span class=\"hljs-keyword\">let</span> children = <span class=\"hljs-title function_\">myNew</span>(<span class=\"hljs-title class_\">Parent</span>, <span class=\"hljs-string\">&#x27;小维&#x27;</span>, <span class=\"hljs-number\">18</span>)<br><br><span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(children)<br></code></pre></td></tr></table></figure>\n"},{"title":"Webpack之旅","date":"2022-11-17T19:23:27.000Z","_content":"\n### 概念\n\n> 当 webpack 处理应用程序时，它会在内部从一个或多个入口点构建一个 [依赖图(dependency graph)](https://webpack.docschina.org/concepts/dependency-graph/)，然后将你项目中所需的每一个模块组合成一个或多个 *bundles*\n\n我们可以使用 webpack 将浏览器不支持的语法转化为可以被浏览器执行的语法\n\n本文的 [github](https://github.com/VaynePeng/learn-webpack)\n\n### 起步\n\n1. 安装 webpack 和 webpack-cli\n\n   ```bash\n   pnpm add -D webpack webpack-cli\n   ```\n\n2. 在项目的根目录添加 webpack.config.js 文件\n\n   webpack 的五大核心\n\n   - mode（模式）--> development 和 prodution\n\n   - entry（入口）--> 指定打包入口\n   - output（输出）--> 打包之后的输入路径和文件名称\n   - loader（加载器）--> webpack 本身只能加载 js 和 json，其他类型的文件需要使用各种 loader \n   - plugins（插件）--> 扩展 webpack 的功能\n\n   ```javascript\n   const { resolve } = require('path')\n   \n   module.exports = {\n     mode: 'development', // production\n     entry: './src/main.js', // 打包的入口文件\n     output: {\n       filename: 'bundle.js', // 输出的文件名称\n       path: resolve(__dirname, 'dist'), // 文件输入的位置\n       clean: true // 每次打包都重新创建 dist 输入的内容\n     },\n     module: {\n       // loader\n       rules: []\n     },\n     plugins: []\n   }\n   ```\n\n3. 使用 npx webpack 运行 --> npx 会将 webpack 中的 .bin 临时加入环境变量，使我们可以执行那些没有全局安装的指令\n\n4. 当执行这个命令之后 webpack 会使用我们在 webpack.config.js 中的配置进行打包\n\n### 我们需要做些什么\n\n> webpack 默认是不能处理样式、图片、html 等资源的，所以我们需要借助一系列的 loader 来帮助我们处理这些资源 --> loader 的加载顺序为从下往上，从右往左\n\n#### 处理 CSS 文件\n\n如果想让 webpack 处理 css 资源，就必须加入两个相关的 loader，css-loader 和 style-loader\n\n```bash\npnpm add -D css-loader style-loader\n```\n\n其中：（如下介绍都是这些 loader 的默认行为，如果需要改变默认行为请参考 [loaders](https://webpack.js.org/loaders)）\n\n- css-loader：将 css 编译成 commonjs 模块\n- style-loader：将 js 中的 css 通过使用多个 style 标签自动把 styles 插入到 DOM 中\n\n```javascript\nmopdule.exports = {\n  ...otherConfig,\n  module: {\n    rules: [\n      {\n        test: /.css$/i, // 正则匹配某个类型的文件\n        use: ['style-loader', 'css-loader'] // 对上面匹配到的文件使用哪个 loader\n      }\n    ]\n  }\n}\n```\n\n通过如上的配置，我们就可以使用 webpack 正常的打包 css 文件了，需要注意的是，css文件必须在 js 中被引入，否则就不会被打包\n\n#### 使用 CSS 预处理器\n\n在一般开发中，我们还会使用一些 css 预处理器来提升开发效率，以 less 为例：\n\n- 同样的 webpack 不支持我们直接使用 less 我们需要使用 less-loader 来解析我们的 less 文件\n\n  ```bash\n  pnpm add -D less-loader # 如果没有安装 less 的话，还需要安装 less\n  ```\n\n- less-loader：将 less 编译为 css\n\n  ```javascript\n  mopdule.exports = {\n    ...otherConfig,\n    module: {\n      rules: [\n        {\n          test: /.less$/i,\n          use: ['style-loader', 'css-loader', 'less-loader']\n        }\n      ]\n    }\n  }\n  ```\n\n#### 处理资源文件\n在 webpack5 中我们可以通过配置资源模块来使用资源文件，而不用配置额外的 loader\n\n- 资源模块的类型\n\n  - asset/resource：发送一个单独的文件并导出 URL\n  - asset/inline：导出一个资源的 data URI\n  - asset/source：导出资源的源代码\n  - asset：在导出一个 data URI 和发送一个单独的文件之间自动选择\n  \n- 图片资源的打包\n  \n    图片资源的打包一般区别于其它资源，我们希望对小图片进行处理，将他们转化为 base64 以减少请求数量\n    \n    - 我们将小于 50kb 的图片转化为 base64，大于 50kb 的图片直接输出，使用 generator 配置，统一输出到 images 的目录下：\n    \n    ```javascript\n    mopdule.exports = {\n      ...otherConfig,\n      module: {\n        rules: [\n          {\n            test: /\\.(png|jpg|svg)$/i,\n            type: 'asset',\n            parser: {\n              dataUrlCondition: {\n                maxSize: 50 * 1024 // 小于 50kb 会转化为 base64 --> 默认为 8kb\n                // bese64 可以减少网络请求次数，但是会提升资源体积，一般只转化小文件为 base64\n              }\n            },\n            // 构建配置\n            generator: {\n              // hash 打包后的文件名\n              // ext 文件拓展名\n              filename: 'images/[hash][ext][query]' // 输入文件的位置和名称\n            }\n          }\n        ]\n      }\n    }\n    ```\n    \n- 处理其它资源类型\n\n  在实际的开发过程中，我们会使用多种不同类型的文件，如果我们可能希望把某几种类型的文件输出在一起，如同上面配置图片资源一样，我们可以通过配置 generator 的选项来控制\n\n  - 首先我们需要注意 type 值的改变，比如下面我们的 ttf 和 woff 并不能被转换为 base64 所以我们在处理其他类型资源的时候一定要注意 type 的值不能写错，不然你的文件可能不会被打包到结果中\n\n  - 我们以引入 iconfont 中的字体为例，我们希望把 font 都输出到 fonts 的目录下，那么我们就可以这样写：\n\n    ```javascript\n    module.exports = {\n      ...otherConfig,\n      module: {\n        rules: [\n          {\n            test: /\\.(ttf|woff2?)$/,\n            type: 'asset/resource',\n            generator: {\n              filename: 'fonts/[hash][ext][query]'\n            }\n          }\n        ]\n      }\n    }\n    ```\n\n#### 处理 HTML 文件\n\n在前面的使用中，我们都是手动引入打包后的文件，当输出文件为多个时，手动引入不仅麻烦，还极易出错，所以我们可以使用一个插件 html-webpack-plugin \n\n```bash\npnpm add -D html-webpack-plugin\n```\n\n这个插件可以帮我们自动生成 html 文件，并引入相关的文件\n\n```javascript\nconst { resolve } = require('path')\nconst HTMLWebpackPlugin = require('html-webpack-plugin')\n\nmodule.exports = {\n  ...otherConfig,\n  plugins: [\n    new HTMLWebpackPlugin({\n      template: resolve(__dirname, 'public/index.html') // 模板\n    })\n  ]\n}\n```\n\n其中 template 为我们设置的基础模板\n\n#### 常见文件类型和路径的快捷使用\n\n在日常的开发中，我们文件几乎都会引入其它的资源文件，他们可能分布在多个不同的文件夹中，获取需要好几层目录才能找到它们，引入他们既麻烦，还容易出错，所以我们一般都会在 webpack 中配置 resolve 选项，来帮助我们更方便的使用他们\n\n```javascript\nconst { resolve } = require('path')\n\nmodule.exports = {\n  ...otherConfig,\n  resolve: {\n    alias: {\n      'xxx': resolve(__dirname, 'src/xxx') \n    },\n    extensions: ['.js', '.ts', '.json'] // 如果你想引入时写后缀，那么你可以使用 extensions 定义他自动查找哪些文件类型进行匹配\n  }\n}\n```\n\n```javascript\nimport usexxx from 'xxx/xx'\n```\n\n就这样，我们无论在哪个层级都可以很方便的引入其它资源，但需要注意，xxx 不要与你使用的其它模块名称重复，resolve.alias 优先级高于其它模块解析方式，所以会让它们不生效\n\n#### 自动构建\n\n或许你受够了每修改一次就需要重新构建的方式，那么，我很高兴告诉你，我们可以使用 webpack-dev-server 来自动构建并更新我们的项目\n\n```bash\npnpm add -D webpack-dev-server\n```\n\n我们只需要简单的配置，即可使用这个美妙的功能：\n\n- 开发服务器\n\n  ```javascript\n  const { resolve } = require('path')\n  \n  module.exports = {\n    ...otherConfig,\n    devServer: {\n      host: 'localhost', // 本地地址\n      open: true, // 自动打开浏览器\n      port: 8080 // 服务端口\n    }\n  }\n  ```\n\n### 常见项目配置项\n\n- eslint\n\n  - 安装：\n\n    ```bash\n    pnpm add -D eslint eslint-webpack-plugin\n    ```\n\n  - 使用：\n\n    ```javascript\n    const ESLintPlugin = require('eslint-webpack-plugin')\n    \n    module.exports = {\n      ...otherConfig,\n      plugins: [\n        new ESLintPlugin()\n      ]\n    }\n    ```\n  \n- babel --> 处理 js 兼容性\n\n  - 安装\n\n    ```bash\n    pnpm add -D babel-loader @babel/core @babel/preset-env\n    ```\n\n  - 使用\n\n    ```javascript\n    module.exports = {\n      ...otherConfig,\n      module: {\n        rules: [\n          {\n            test: /\\.js$/,\n            exclude: /node_modules/,\n            use: ['babel-loader']\n          }\n        ]\n      }\n    }\n    ```\n\n- mini-css-extract-plugin --> 本插件会将 CSS 提取到单独的文件中，为每个包含 CSS 的 JS 文件创建一个 CSS 文件，并且支持 CSS 和 SourceMaps 的按需加载\n\n  在之前的使用过程中，我们会发现，我们的 css 文件是和 js 文件打包到一起的，导致我们的 js 文件非常大，导致样式加载过慢，影响用户体验，那么我们可以使用这个插件来将 css 样式分离\n\n  - 安装\n\n    ```bash\n    pnpm add -D mini-css-extract-plugin\n    ```\n\n  - 使用\n\n    ```javascript\n    const MiniCssExtractPlugin = require(\"mini-css-extract-plugin\")\n    \n    module.exports = {\n      ...otherConfig,\n      module: {\n        rules: [\n          {\n            test: /.less$/i,\n            use: [MiniCssExtractPlugin.loader, 'css-loader', 'less-loader']\n          }\n        ]\n      },\n      plugins: [\n        new MiniCssExtractPlugin()\n      ]\n    }\n    ```\n\n    我们需要把之前的 style-loader 换成 MiniCssExtractPlugin.loader 并且在 plugins 中注册，这样再次打包，我们的 css 样式将会在 js 文件中分离出来\n\n- postcss 处理 css 兼容性\n\n  - 安装\n\n    ```bash\n    pnpm add -D postcss-loader postcss postcss-preset-env\n    ```\n\n  - 使用\n\n    ```javascript\n    const MiniCssExtractPlugin = require(\"mini-css-extract-plugin\")\n    \n    mopdule.exports = {\n      ...otherConfig,\n      module: {\n        rules: [\n          {\n            test: /.less$/i,\n            use: [MiniCssExtractPlugin.loader, 'css-loader', 'postcss-loader', 'less-loader']\n          }\n        ]\n      },\n      plugins: [\n        new MiniCssExtractPlugin()\n      ]\n    }\n    ```\n\n    ```json\n    // package.json\n    \"browserslist\": [\n      \"last 1 version\",\n      \"> 1%\",\n      \"not dead\"\n    ]\n    ```\n\n    \n\n","source":"_posts/learn-webpack.md","raw":"---\ntitle: Webpack之旅\ndate: 2022-11-18 03:23:27\ntags: [JavaScript, Webpack]\ncategory: 前端\n---\n\n### 概念\n\n> 当 webpack 处理应用程序时，它会在内部从一个或多个入口点构建一个 [依赖图(dependency graph)](https://webpack.docschina.org/concepts/dependency-graph/)，然后将你项目中所需的每一个模块组合成一个或多个 *bundles*\n\n我们可以使用 webpack 将浏览器不支持的语法转化为可以被浏览器执行的语法\n\n本文的 [github](https://github.com/VaynePeng/learn-webpack)\n\n### 起步\n\n1. 安装 webpack 和 webpack-cli\n\n   ```bash\n   pnpm add -D webpack webpack-cli\n   ```\n\n2. 在项目的根目录添加 webpack.config.js 文件\n\n   webpack 的五大核心\n\n   - mode（模式）--> development 和 prodution\n\n   - entry（入口）--> 指定打包入口\n   - output（输出）--> 打包之后的输入路径和文件名称\n   - loader（加载器）--> webpack 本身只能加载 js 和 json，其他类型的文件需要使用各种 loader \n   - plugins（插件）--> 扩展 webpack 的功能\n\n   ```javascript\n   const { resolve } = require('path')\n   \n   module.exports = {\n     mode: 'development', // production\n     entry: './src/main.js', // 打包的入口文件\n     output: {\n       filename: 'bundle.js', // 输出的文件名称\n       path: resolve(__dirname, 'dist'), // 文件输入的位置\n       clean: true // 每次打包都重新创建 dist 输入的内容\n     },\n     module: {\n       // loader\n       rules: []\n     },\n     plugins: []\n   }\n   ```\n\n3. 使用 npx webpack 运行 --> npx 会将 webpack 中的 .bin 临时加入环境变量，使我们可以执行那些没有全局安装的指令\n\n4. 当执行这个命令之后 webpack 会使用我们在 webpack.config.js 中的配置进行打包\n\n### 我们需要做些什么\n\n> webpack 默认是不能处理样式、图片、html 等资源的，所以我们需要借助一系列的 loader 来帮助我们处理这些资源 --> loader 的加载顺序为从下往上，从右往左\n\n#### 处理 CSS 文件\n\n如果想让 webpack 处理 css 资源，就必须加入两个相关的 loader，css-loader 和 style-loader\n\n```bash\npnpm add -D css-loader style-loader\n```\n\n其中：（如下介绍都是这些 loader 的默认行为，如果需要改变默认行为请参考 [loaders](https://webpack.js.org/loaders)）\n\n- css-loader：将 css 编译成 commonjs 模块\n- style-loader：将 js 中的 css 通过使用多个 style 标签自动把 styles 插入到 DOM 中\n\n```javascript\nmopdule.exports = {\n  ...otherConfig,\n  module: {\n    rules: [\n      {\n        test: /.css$/i, // 正则匹配某个类型的文件\n        use: ['style-loader', 'css-loader'] // 对上面匹配到的文件使用哪个 loader\n      }\n    ]\n  }\n}\n```\n\n通过如上的配置，我们就可以使用 webpack 正常的打包 css 文件了，需要注意的是，css文件必须在 js 中被引入，否则就不会被打包\n\n#### 使用 CSS 预处理器\n\n在一般开发中，我们还会使用一些 css 预处理器来提升开发效率，以 less 为例：\n\n- 同样的 webpack 不支持我们直接使用 less 我们需要使用 less-loader 来解析我们的 less 文件\n\n  ```bash\n  pnpm add -D less-loader # 如果没有安装 less 的话，还需要安装 less\n  ```\n\n- less-loader：将 less 编译为 css\n\n  ```javascript\n  mopdule.exports = {\n    ...otherConfig,\n    module: {\n      rules: [\n        {\n          test: /.less$/i,\n          use: ['style-loader', 'css-loader', 'less-loader']\n        }\n      ]\n    }\n  }\n  ```\n\n#### 处理资源文件\n在 webpack5 中我们可以通过配置资源模块来使用资源文件，而不用配置额外的 loader\n\n- 资源模块的类型\n\n  - asset/resource：发送一个单独的文件并导出 URL\n  - asset/inline：导出一个资源的 data URI\n  - asset/source：导出资源的源代码\n  - asset：在导出一个 data URI 和发送一个单独的文件之间自动选择\n  \n- 图片资源的打包\n  \n    图片资源的打包一般区别于其它资源，我们希望对小图片进行处理，将他们转化为 base64 以减少请求数量\n    \n    - 我们将小于 50kb 的图片转化为 base64，大于 50kb 的图片直接输出，使用 generator 配置，统一输出到 images 的目录下：\n    \n    ```javascript\n    mopdule.exports = {\n      ...otherConfig,\n      module: {\n        rules: [\n          {\n            test: /\\.(png|jpg|svg)$/i,\n            type: 'asset',\n            parser: {\n              dataUrlCondition: {\n                maxSize: 50 * 1024 // 小于 50kb 会转化为 base64 --> 默认为 8kb\n                // bese64 可以减少网络请求次数，但是会提升资源体积，一般只转化小文件为 base64\n              }\n            },\n            // 构建配置\n            generator: {\n              // hash 打包后的文件名\n              // ext 文件拓展名\n              filename: 'images/[hash][ext][query]' // 输入文件的位置和名称\n            }\n          }\n        ]\n      }\n    }\n    ```\n    \n- 处理其它资源类型\n\n  在实际的开发过程中，我们会使用多种不同类型的文件，如果我们可能希望把某几种类型的文件输出在一起，如同上面配置图片资源一样，我们可以通过配置 generator 的选项来控制\n\n  - 首先我们需要注意 type 值的改变，比如下面我们的 ttf 和 woff 并不能被转换为 base64 所以我们在处理其他类型资源的时候一定要注意 type 的值不能写错，不然你的文件可能不会被打包到结果中\n\n  - 我们以引入 iconfont 中的字体为例，我们希望把 font 都输出到 fonts 的目录下，那么我们就可以这样写：\n\n    ```javascript\n    module.exports = {\n      ...otherConfig,\n      module: {\n        rules: [\n          {\n            test: /\\.(ttf|woff2?)$/,\n            type: 'asset/resource',\n            generator: {\n              filename: 'fonts/[hash][ext][query]'\n            }\n          }\n        ]\n      }\n    }\n    ```\n\n#### 处理 HTML 文件\n\n在前面的使用中，我们都是手动引入打包后的文件，当输出文件为多个时，手动引入不仅麻烦，还极易出错，所以我们可以使用一个插件 html-webpack-plugin \n\n```bash\npnpm add -D html-webpack-plugin\n```\n\n这个插件可以帮我们自动生成 html 文件，并引入相关的文件\n\n```javascript\nconst { resolve } = require('path')\nconst HTMLWebpackPlugin = require('html-webpack-plugin')\n\nmodule.exports = {\n  ...otherConfig,\n  plugins: [\n    new HTMLWebpackPlugin({\n      template: resolve(__dirname, 'public/index.html') // 模板\n    })\n  ]\n}\n```\n\n其中 template 为我们设置的基础模板\n\n#### 常见文件类型和路径的快捷使用\n\n在日常的开发中，我们文件几乎都会引入其它的资源文件，他们可能分布在多个不同的文件夹中，获取需要好几层目录才能找到它们，引入他们既麻烦，还容易出错，所以我们一般都会在 webpack 中配置 resolve 选项，来帮助我们更方便的使用他们\n\n```javascript\nconst { resolve } = require('path')\n\nmodule.exports = {\n  ...otherConfig,\n  resolve: {\n    alias: {\n      'xxx': resolve(__dirname, 'src/xxx') \n    },\n    extensions: ['.js', '.ts', '.json'] // 如果你想引入时写后缀，那么你可以使用 extensions 定义他自动查找哪些文件类型进行匹配\n  }\n}\n```\n\n```javascript\nimport usexxx from 'xxx/xx'\n```\n\n就这样，我们无论在哪个层级都可以很方便的引入其它资源，但需要注意，xxx 不要与你使用的其它模块名称重复，resolve.alias 优先级高于其它模块解析方式，所以会让它们不生效\n\n#### 自动构建\n\n或许你受够了每修改一次就需要重新构建的方式，那么，我很高兴告诉你，我们可以使用 webpack-dev-server 来自动构建并更新我们的项目\n\n```bash\npnpm add -D webpack-dev-server\n```\n\n我们只需要简单的配置，即可使用这个美妙的功能：\n\n- 开发服务器\n\n  ```javascript\n  const { resolve } = require('path')\n  \n  module.exports = {\n    ...otherConfig,\n    devServer: {\n      host: 'localhost', // 本地地址\n      open: true, // 自动打开浏览器\n      port: 8080 // 服务端口\n    }\n  }\n  ```\n\n### 常见项目配置项\n\n- eslint\n\n  - 安装：\n\n    ```bash\n    pnpm add -D eslint eslint-webpack-plugin\n    ```\n\n  - 使用：\n\n    ```javascript\n    const ESLintPlugin = require('eslint-webpack-plugin')\n    \n    module.exports = {\n      ...otherConfig,\n      plugins: [\n        new ESLintPlugin()\n      ]\n    }\n    ```\n  \n- babel --> 处理 js 兼容性\n\n  - 安装\n\n    ```bash\n    pnpm add -D babel-loader @babel/core @babel/preset-env\n    ```\n\n  - 使用\n\n    ```javascript\n    module.exports = {\n      ...otherConfig,\n      module: {\n        rules: [\n          {\n            test: /\\.js$/,\n            exclude: /node_modules/,\n            use: ['babel-loader']\n          }\n        ]\n      }\n    }\n    ```\n\n- mini-css-extract-plugin --> 本插件会将 CSS 提取到单独的文件中，为每个包含 CSS 的 JS 文件创建一个 CSS 文件，并且支持 CSS 和 SourceMaps 的按需加载\n\n  在之前的使用过程中，我们会发现，我们的 css 文件是和 js 文件打包到一起的，导致我们的 js 文件非常大，导致样式加载过慢，影响用户体验，那么我们可以使用这个插件来将 css 样式分离\n\n  - 安装\n\n    ```bash\n    pnpm add -D mini-css-extract-plugin\n    ```\n\n  - 使用\n\n    ```javascript\n    const MiniCssExtractPlugin = require(\"mini-css-extract-plugin\")\n    \n    module.exports = {\n      ...otherConfig,\n      module: {\n        rules: [\n          {\n            test: /.less$/i,\n            use: [MiniCssExtractPlugin.loader, 'css-loader', 'less-loader']\n          }\n        ]\n      },\n      plugins: [\n        new MiniCssExtractPlugin()\n      ]\n    }\n    ```\n\n    我们需要把之前的 style-loader 换成 MiniCssExtractPlugin.loader 并且在 plugins 中注册，这样再次打包，我们的 css 样式将会在 js 文件中分离出来\n\n- postcss 处理 css 兼容性\n\n  - 安装\n\n    ```bash\n    pnpm add -D postcss-loader postcss postcss-preset-env\n    ```\n\n  - 使用\n\n    ```javascript\n    const MiniCssExtractPlugin = require(\"mini-css-extract-plugin\")\n    \n    mopdule.exports = {\n      ...otherConfig,\n      module: {\n        rules: [\n          {\n            test: /.less$/i,\n            use: [MiniCssExtractPlugin.loader, 'css-loader', 'postcss-loader', 'less-loader']\n          }\n        ]\n      },\n      plugins: [\n        new MiniCssExtractPlugin()\n      ]\n    }\n    ```\n\n    ```json\n    // package.json\n    \"browserslist\": [\n      \"last 1 version\",\n      \"> 1%\",\n      \"not dead\"\n    ]\n    ```\n\n    \n\n","slug":"learn-webpack","published":1,"updated":"2022-12-12T17:40:18.548Z","_id":"clamwctcx0000xwfg6yajaj7r","comments":1,"layout":"post","photos":[],"link":"","content":"<h3 id=\"概念\"><a href=\"#概念\" class=\"headerlink\" title=\"概念\"></a>概念</h3><blockquote>\n<p>当 webpack 处理应用程序时，它会在内部从一个或多个入口点构建一个 <a href=\"https://webpack.docschina.org/concepts/dependency-graph/\">依赖图(dependency graph)</a>，然后将你项目中所需的每一个模块组合成一个或多个 <em>bundles</em></p>\n</blockquote>\n<p>我们可以使用 webpack 将浏览器不支持的语法转化为可以被浏览器执行的语法</p>\n<p>本文的 <a href=\"https://github.com/VaynePeng/learn-webpack\">github</a></p>\n<h3 id=\"起步\"><a href=\"#起步\" class=\"headerlink\" title=\"起步\"></a>起步</h3><ol>\n<li><p>安装 webpack 和 webpack-cli</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\">pnpm add -D webpack webpack-cli<br></code></pre></td></tr></table></figure></li>\n<li><p>在项目的根目录添加 webpack.config.js 文件</p>\n<p>webpack 的五大核心</p>\n<ul>\n<li><p>mode（模式）–&gt; development 和 prodution</p>\n</li>\n<li><p>entry（入口）–&gt; 指定打包入口</p>\n</li>\n<li><p>output（输出）–&gt; 打包之后的输入路径和文件名称</p>\n</li>\n<li><p>loader（加载器）–&gt; webpack 本身只能加载 js 和 json，其他类型的文件需要使用各种 loader </p>\n</li>\n<li><p>plugins（插件）–&gt; 扩展 webpack 的功能</p>\n</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript\"><span class=\"hljs-keyword\">const</span> &#123; resolve &#125; = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">&#x27;path&#x27;</span>)<br><br><span class=\"hljs-variable language_\">module</span>.<span class=\"hljs-property\">exports</span> = &#123;<br>  <span class=\"hljs-attr\">mode</span>: <span class=\"hljs-string\">&#x27;development&#x27;</span>, <span class=\"hljs-comment\">// production</span><br>  <span class=\"hljs-attr\">entry</span>: <span class=\"hljs-string\">&#x27;./src/main.js&#x27;</span>, <span class=\"hljs-comment\">// 打包的入口文件</span><br>  <span class=\"hljs-attr\">output</span>: &#123;<br>    <span class=\"hljs-attr\">filename</span>: <span class=\"hljs-string\">&#x27;bundle.js&#x27;</span>, <span class=\"hljs-comment\">// 输出的文件名称</span><br>    <span class=\"hljs-attr\">path</span>: <span class=\"hljs-title function_\">resolve</span>(__dirname, <span class=\"hljs-string\">&#x27;dist&#x27;</span>), <span class=\"hljs-comment\">// 文件输入的位置</span><br>    <span class=\"hljs-attr\">clean</span>: <span class=\"hljs-literal\">true</span> <span class=\"hljs-comment\">// 每次打包都重新创建 dist 输入的内容</span><br>  &#125;,<br>  <span class=\"hljs-attr\">module</span>: &#123;<br>    <span class=\"hljs-comment\">// loader</span><br>    <span class=\"hljs-attr\">rules</span>: []<br>  &#125;,<br>  <span class=\"hljs-attr\">plugins</span>: []<br>&#125;<br></code></pre></td></tr></table></figure></li>\n<li><p>使用 npx webpack 运行 –&gt; npx 会将 webpack 中的 .bin 临时加入环境变量，使我们可以执行那些没有全局安装的指令</p>\n</li>\n<li><p>当执行这个命令之后 webpack 会使用我们在 webpack.config.js 中的配置进行打包</p>\n</li>\n</ol>\n<h3 id=\"我们需要做些什么\"><a href=\"#我们需要做些什么\" class=\"headerlink\" title=\"我们需要做些什么\"></a>我们需要做些什么</h3><blockquote>\n<p>webpack 默认是不能处理样式、图片、html 等资源的，所以我们需要借助一系列的 loader 来帮助我们处理这些资源 –&gt; loader 的加载顺序为从下往上，从右往左</p>\n</blockquote>\n<h4 id=\"处理-CSS-文件\"><a href=\"#处理-CSS-文件\" class=\"headerlink\" title=\"处理 CSS 文件\"></a>处理 CSS 文件</h4><p>如果想让 webpack 处理 css 资源，就必须加入两个相关的 loader，css-loader 和 style-loader</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\">pnpm add -D css-loader style-loader<br></code></pre></td></tr></table></figure>\n\n<p>其中：（如下介绍都是这些 loader 的默认行为，如果需要改变默认行为请参考 <a href=\"https://webpack.js.org/loaders\">loaders</a>）</p>\n<ul>\n<li>css-loader：将 css 编译成 commonjs 模块</li>\n<li>style-loader：将 js 中的 css 通过使用多个 style 标签自动把 styles 插入到 DOM 中</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript\">mopdule.<span class=\"hljs-property\">exports</span> = &#123;<br>  ...otherConfig,<br>  <span class=\"hljs-attr\">module</span>: &#123;<br>    <span class=\"hljs-attr\">rules</span>: [<br>      &#123;<br>        <span class=\"hljs-attr\">test</span>: <span class=\"hljs-regexp\">/.css$/i</span>, <span class=\"hljs-comment\">// 正则匹配某个类型的文件</span><br>        <span class=\"hljs-attr\">use</span>: [<span class=\"hljs-string\">&#x27;style-loader&#x27;</span>, <span class=\"hljs-string\">&#x27;css-loader&#x27;</span>] <span class=\"hljs-comment\">// 对上面匹配到的文件使用哪个 loader</span><br>      &#125;<br>    ]<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p>通过如上的配置，我们就可以使用 webpack 正常的打包 css 文件了，需要注意的是，css文件必须在 js 中被引入，否则就不会被打包</p>\n<h4 id=\"使用-CSS-预处理器\"><a href=\"#使用-CSS-预处理器\" class=\"headerlink\" title=\"使用 CSS 预处理器\"></a>使用 CSS 预处理器</h4><p>在一般开发中，我们还会使用一些 css 预处理器来提升开发效率，以 less 为例：</p>\n<ul>\n<li><p>同样的 webpack 不支持我们直接使用 less 我们需要使用 less-loader 来解析我们的 less 文件</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\">pnpm add -D less-loader <span class=\"hljs-comment\"># 如果没有安装 less 的话，还需要安装 less</span><br></code></pre></td></tr></table></figure></li>\n<li><p>less-loader：将 less 编译为 css</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript\">mopdule.<span class=\"hljs-property\">exports</span> = &#123;<br>  ...otherConfig,<br>  <span class=\"hljs-attr\">module</span>: &#123;<br>    <span class=\"hljs-attr\">rules</span>: [<br>      &#123;<br>        <span class=\"hljs-attr\">test</span>: <span class=\"hljs-regexp\">/.less$/i</span>,<br>        <span class=\"hljs-attr\">use</span>: [<span class=\"hljs-string\">&#x27;style-loader&#x27;</span>, <span class=\"hljs-string\">&#x27;css-loader&#x27;</span>, <span class=\"hljs-string\">&#x27;less-loader&#x27;</span>]<br>      &#125;<br>    ]<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li>\n</ul>\n<h4 id=\"处理资源文件\"><a href=\"#处理资源文件\" class=\"headerlink\" title=\"处理资源文件\"></a>处理资源文件</h4><p>在 webpack5 中我们可以通过配置资源模块来使用资源文件，而不用配置额外的 loader</p>\n<ul>\n<li><p>资源模块的类型</p>\n<ul>\n<li>asset/resource：发送一个单独的文件并导出 URL</li>\n<li>asset/inline：导出一个资源的 data URI</li>\n<li>asset/source：导出资源的源代码</li>\n<li>asset：在导出一个 data URI 和发送一个单独的文件之间自动选择</li>\n</ul>\n</li>\n<li><p>图片资源的打包</p>\n<p>  图片资源的打包一般区别于其它资源，我们希望对小图片进行处理，将他们转化为 base64 以减少请求数量</p>\n<ul>\n<li>我们将小于 50kb 的图片转化为 base64，大于 50kb 的图片直接输出，使用 generator 配置，统一输出到 images 的目录下：</li>\n</ul>\n  <figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript\">mopdule.<span class=\"hljs-property\">exports</span> = &#123;<br>  ...otherConfig,<br>  <span class=\"hljs-attr\">module</span>: &#123;<br>    <span class=\"hljs-attr\">rules</span>: [<br>      &#123;<br>        <span class=\"hljs-attr\">test</span>: <span class=\"hljs-regexp\">/\\.(png|jpg|svg)$/i</span>,<br>        <span class=\"hljs-attr\">type</span>: <span class=\"hljs-string\">&#x27;asset&#x27;</span>,<br>        <span class=\"hljs-attr\">parser</span>: &#123;<br>          <span class=\"hljs-attr\">dataUrlCondition</span>: &#123;<br>            <span class=\"hljs-attr\">maxSize</span>: <span class=\"hljs-number\">50</span> * <span class=\"hljs-number\">1024</span> <span class=\"hljs-comment\">// 小于 50kb 会转化为 base64 --&gt; 默认为 8kb</span><br>            <span class=\"hljs-comment\">// bese64 可以减少网络请求次数，但是会提升资源体积，一般只转化小文件为 base64</span><br>          &#125;<br>        &#125;,<br>        <span class=\"hljs-comment\">// 构建配置</span><br>        <span class=\"hljs-attr\">generator</span>: &#123;<br>          <span class=\"hljs-comment\">// hash 打包后的文件名</span><br>          <span class=\"hljs-comment\">// ext 文件拓展名</span><br>          <span class=\"hljs-attr\">filename</span>: <span class=\"hljs-string\">&#x27;images/[hash][ext][query]&#x27;</span> <span class=\"hljs-comment\">// 输入文件的位置和名称</span><br>        &#125;<br>      &#125;<br>    ]<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n</li>\n<li><p>处理其它资源类型</p>\n<p>在实际的开发过程中，我们会使用多种不同类型的文件，如果我们可能希望把某几种类型的文件输出在一起，如同上面配置图片资源一样，我们可以通过配置 generator 的选项来控制</p>\n<ul>\n<li><p>首先我们需要注意 type 值的改变，比如下面我们的 ttf 和 woff 并不能被转换为 base64 所以我们在处理其他类型资源的时候一定要注意 type 的值不能写错，不然你的文件可能不会被打包到结果中</p>\n</li>\n<li><p>我们以引入 iconfont 中的字体为例，我们希望把 font 都输出到 fonts 的目录下，那么我们就可以这样写：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript\"><span class=\"hljs-variable language_\">module</span>.<span class=\"hljs-property\">exports</span> = &#123;<br>  ...otherConfig,<br>  <span class=\"hljs-attr\">module</span>: &#123;<br>    <span class=\"hljs-attr\">rules</span>: [<br>      &#123;<br>        <span class=\"hljs-attr\">test</span>: <span class=\"hljs-regexp\">/\\.(ttf|woff2?)$/</span>,<br>        <span class=\"hljs-attr\">type</span>: <span class=\"hljs-string\">&#x27;asset/resource&#x27;</span>,<br>        <span class=\"hljs-attr\">generator</span>: &#123;<br>          <span class=\"hljs-attr\">filename</span>: <span class=\"hljs-string\">&#x27;fonts/[hash][ext][query]&#x27;</span><br>        &#125;<br>      &#125;<br>    ]<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li>\n</ul>\n</li>\n</ul>\n<h4 id=\"处理-HTML-文件\"><a href=\"#处理-HTML-文件\" class=\"headerlink\" title=\"处理 HTML 文件\"></a>处理 HTML 文件</h4><p>在前面的使用中，我们都是手动引入打包后的文件，当输出文件为多个时，手动引入不仅麻烦，还极易出错，所以我们可以使用一个插件 html-webpack-plugin </p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\">pnpm add -D html-webpack-plugin<br></code></pre></td></tr></table></figure>\n\n<p>这个插件可以帮我们自动生成 html 文件，并引入相关的文件</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript\"><span class=\"hljs-keyword\">const</span> &#123; resolve &#125; = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">&#x27;path&#x27;</span>)<br><span class=\"hljs-keyword\">const</span> <span class=\"hljs-title class_\">HTMLWebpackPlugin</span> = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">&#x27;html-webpack-plugin&#x27;</span>)<br><br><span class=\"hljs-variable language_\">module</span>.<span class=\"hljs-property\">exports</span> = &#123;<br>  ...otherConfig,<br>  <span class=\"hljs-attr\">plugins</span>: [<br>    <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">HTMLWebpackPlugin</span>(&#123;<br>      <span class=\"hljs-attr\">template</span>: <span class=\"hljs-title function_\">resolve</span>(__dirname, <span class=\"hljs-string\">&#x27;public/index.html&#x27;</span>) <span class=\"hljs-comment\">// 模板</span><br>    &#125;)<br>  ]<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p>其中 template 为我们设置的基础模板</p>\n<h4 id=\"常见文件类型和路径的快捷使用\"><a href=\"#常见文件类型和路径的快捷使用\" class=\"headerlink\" title=\"常见文件类型和路径的快捷使用\"></a>常见文件类型和路径的快捷使用</h4><p>在日常的开发中，我们文件几乎都会引入其它的资源文件，他们可能分布在多个不同的文件夹中，获取需要好几层目录才能找到它们，引入他们既麻烦，还容易出错，所以我们一般都会在 webpack 中配置 resolve 选项，来帮助我们更方便的使用他们</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript\"><span class=\"hljs-keyword\">const</span> &#123; resolve &#125; = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">&#x27;path&#x27;</span>)<br><br><span class=\"hljs-variable language_\">module</span>.<span class=\"hljs-property\">exports</span> = &#123;<br>  ...otherConfig,<br>  <span class=\"hljs-attr\">resolve</span>: &#123;<br>    <span class=\"hljs-attr\">alias</span>: &#123;<br>      <span class=\"hljs-string\">&#x27;xxx&#x27;</span>: <span class=\"hljs-title function_\">resolve</span>(__dirname, <span class=\"hljs-string\">&#x27;src/xxx&#x27;</span>) <br>    &#125;,<br>    <span class=\"hljs-attr\">extensions</span>: [<span class=\"hljs-string\">&#x27;.js&#x27;</span>, <span class=\"hljs-string\">&#x27;.ts&#x27;</span>, <span class=\"hljs-string\">&#x27;.json&#x27;</span>] <span class=\"hljs-comment\">// 如果你想引入时写后缀，那么你可以使用 extensions 定义他自动查找哪些文件类型进行匹配</span><br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript\"><span class=\"hljs-keyword\">import</span> usexxx <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;xxx/xx&#x27;</span><br></code></pre></td></tr></table></figure>\n\n<p>就这样，我们无论在哪个层级都可以很方便的引入其它资源，但需要注意，xxx 不要与你使用的其它模块名称重复，resolve.alias 优先级高于其它模块解析方式，所以会让它们不生效</p>\n<h4 id=\"自动构建\"><a href=\"#自动构建\" class=\"headerlink\" title=\"自动构建\"></a>自动构建</h4><p>或许你受够了每修改一次就需要重新构建的方式，那么，我很高兴告诉你，我们可以使用 webpack-dev-server 来自动构建并更新我们的项目</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\">pnpm add -D webpack-dev-server<br></code></pre></td></tr></table></figure>\n\n<p>我们只需要简单的配置，即可使用这个美妙的功能：</p>\n<ul>\n<li><p>开发服务器</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript\"><span class=\"hljs-keyword\">const</span> &#123; resolve &#125; = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">&#x27;path&#x27;</span>)<br><br><span class=\"hljs-variable language_\">module</span>.<span class=\"hljs-property\">exports</span> = &#123;<br>  ...otherConfig,<br>  <span class=\"hljs-attr\">devServer</span>: &#123;<br>    <span class=\"hljs-attr\">host</span>: <span class=\"hljs-string\">&#x27;localhost&#x27;</span>, <span class=\"hljs-comment\">// 本地地址</span><br>    <span class=\"hljs-attr\">open</span>: <span class=\"hljs-literal\">true</span>, <span class=\"hljs-comment\">// 自动打开浏览器</span><br>    <span class=\"hljs-attr\">port</span>: <span class=\"hljs-number\">8080</span> <span class=\"hljs-comment\">// 服务端口</span><br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li>\n</ul>\n<h3 id=\"常见项目配置项\"><a href=\"#常见项目配置项\" class=\"headerlink\" title=\"常见项目配置项\"></a>常见项目配置项</h3><ul>\n<li><p>eslint</p>\n<ul>\n<li><p>安装：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\">pnpm add -D eslint eslint-webpack-plugin<br></code></pre></td></tr></table></figure></li>\n<li><p>使用：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript\"><span class=\"hljs-keyword\">const</span> <span class=\"hljs-title class_\">ESLintPlugin</span> = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">&#x27;eslint-webpack-plugin&#x27;</span>)<br><br><span class=\"hljs-variable language_\">module</span>.<span class=\"hljs-property\">exports</span> = &#123;<br>  ...otherConfig,<br>  <span class=\"hljs-attr\">plugins</span>: [<br>    <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">ESLintPlugin</span>()<br>  ]<br>&#125;<br></code></pre></td></tr></table></figure></li>\n</ul>\n</li>\n<li><p>babel –&gt; 处理 js 兼容性</p>\n<ul>\n<li><p>安装</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\">pnpm add -D babel-loader @babel/core @babel/preset-env<br></code></pre></td></tr></table></figure></li>\n<li><p>使用</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript\"><span class=\"hljs-variable language_\">module</span>.<span class=\"hljs-property\">exports</span> = &#123;<br>  ...otherConfig,<br>  <span class=\"hljs-attr\">module</span>: &#123;<br>    <span class=\"hljs-attr\">rules</span>: [<br>      &#123;<br>        <span class=\"hljs-attr\">test</span>: <span class=\"hljs-regexp\">/\\.js$/</span>,<br>        <span class=\"hljs-attr\">exclude</span>: <span class=\"hljs-regexp\">/node_modules/</span>,<br>        <span class=\"hljs-attr\">use</span>: [<span class=\"hljs-string\">&#x27;babel-loader&#x27;</span>]<br>      &#125;<br>    ]<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li>\n</ul>\n</li>\n<li><p>mini-css-extract-plugin –&gt; 本插件会将 CSS 提取到单独的文件中，为每个包含 CSS 的 JS 文件创建一个 CSS 文件，并且支持 CSS 和 SourceMaps 的按需加载</p>\n<p>在之前的使用过程中，我们会发现，我们的 css 文件是和 js 文件打包到一起的，导致我们的 js 文件非常大，导致样式加载过慢，影响用户体验，那么我们可以使用这个插件来将 css 样式分离</p>\n<ul>\n<li><p>安装</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\">pnpm add -D mini-css-extract-plugin<br></code></pre></td></tr></table></figure></li>\n<li><p>使用</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript\"><span class=\"hljs-keyword\">const</span> <span class=\"hljs-title class_\">MiniCssExtractPlugin</span> = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">&quot;mini-css-extract-plugin&quot;</span>)<br><br><span class=\"hljs-variable language_\">module</span>.<span class=\"hljs-property\">exports</span> = &#123;<br>  ...otherConfig,<br>  <span class=\"hljs-attr\">module</span>: &#123;<br>    <span class=\"hljs-attr\">rules</span>: [<br>      &#123;<br>        <span class=\"hljs-attr\">test</span>: <span class=\"hljs-regexp\">/.less$/i</span>,<br>        <span class=\"hljs-attr\">use</span>: [<span class=\"hljs-title class_\">MiniCssExtractPlugin</span>.<span class=\"hljs-property\">loader</span>, <span class=\"hljs-string\">&#x27;css-loader&#x27;</span>, <span class=\"hljs-string\">&#x27;less-loader&#x27;</span>]<br>      &#125;<br>    ]<br>  &#125;,<br>  <span class=\"hljs-attr\">plugins</span>: [<br>    <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">MiniCssExtractPlugin</span>()<br>  ]<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p>我们需要把之前的 style-loader 换成 MiniCssExtractPlugin.loader 并且在 plugins 中注册，这样再次打包，我们的 css 样式将会在 js 文件中分离出来</p>\n</li>\n</ul>\n</li>\n<li><p>postcss 处理 css 兼容性</p>\n<ul>\n<li><p>安装</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\">pnpm add -D postcss-loader postcss postcss-preset-env<br></code></pre></td></tr></table></figure></li>\n<li><p>使用</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript\"><span class=\"hljs-keyword\">const</span> <span class=\"hljs-title class_\">MiniCssExtractPlugin</span> = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">&quot;mini-css-extract-plugin&quot;</span>)<br><br>mopdule.<span class=\"hljs-property\">exports</span> = &#123;<br>  ...otherConfig,<br>  <span class=\"hljs-attr\">module</span>: &#123;<br>    <span class=\"hljs-attr\">rules</span>: [<br>      &#123;<br>        <span class=\"hljs-attr\">test</span>: <span class=\"hljs-regexp\">/.less$/i</span>,<br>        <span class=\"hljs-attr\">use</span>: [<span class=\"hljs-title class_\">MiniCssExtractPlugin</span>.<span class=\"hljs-property\">loader</span>, <span class=\"hljs-string\">&#x27;css-loader&#x27;</span>, <span class=\"hljs-string\">&#x27;postcss-loader&#x27;</span>, <span class=\"hljs-string\">&#x27;less-loader&#x27;</span>]<br>      &#125;<br>    ]<br>  &#125;,<br>  <span class=\"hljs-attr\">plugins</span>: [<br>    <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">MiniCssExtractPlugin</span>()<br>  ]<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs json\"><span class=\"hljs-comment\">// package.json</span><br><span class=\"hljs-attr\">&quot;browserslist&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-punctuation\">[</span><br>  <span class=\"hljs-string\">&quot;last 1 version&quot;</span><span class=\"hljs-punctuation\">,</span><br>  <span class=\"hljs-string\">&quot;&gt; 1%&quot;</span><span class=\"hljs-punctuation\">,</span><br>  <span class=\"hljs-string\">&quot;not dead&quot;</span><br><span class=\"hljs-punctuation\">]</span><br></code></pre></td></tr></table></figure></li>\n</ul>\n</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"概念\"><a href=\"#概念\" class=\"headerlink\" title=\"概念\"></a>概念</h3><blockquote>\n<p>当 webpack 处理应用程序时，它会在内部从一个或多个入口点构建一个 <a href=\"https://webpack.docschina.org/concepts/dependency-graph/\">依赖图(dependency graph)</a>，然后将你项目中所需的每一个模块组合成一个或多个 <em>bundles</em></p>\n</blockquote>\n<p>我们可以使用 webpack 将浏览器不支持的语法转化为可以被浏览器执行的语法</p>\n<p>本文的 <a href=\"https://github.com/VaynePeng/learn-webpack\">github</a></p>\n<h3 id=\"起步\"><a href=\"#起步\" class=\"headerlink\" title=\"起步\"></a>起步</h3><ol>\n<li><p>安装 webpack 和 webpack-cli</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\">pnpm add -D webpack webpack-cli<br></code></pre></td></tr></table></figure></li>\n<li><p>在项目的根目录添加 webpack.config.js 文件</p>\n<p>webpack 的五大核心</p>\n<ul>\n<li><p>mode（模式）–&gt; development 和 prodution</p>\n</li>\n<li><p>entry（入口）–&gt; 指定打包入口</p>\n</li>\n<li><p>output（输出）–&gt; 打包之后的输入路径和文件名称</p>\n</li>\n<li><p>loader（加载器）–&gt; webpack 本身只能加载 js 和 json，其他类型的文件需要使用各种 loader </p>\n</li>\n<li><p>plugins（插件）–&gt; 扩展 webpack 的功能</p>\n</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript\"><span class=\"hljs-keyword\">const</span> &#123; resolve &#125; = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">&#x27;path&#x27;</span>)<br><br><span class=\"hljs-variable language_\">module</span>.<span class=\"hljs-property\">exports</span> = &#123;<br>  <span class=\"hljs-attr\">mode</span>: <span class=\"hljs-string\">&#x27;development&#x27;</span>, <span class=\"hljs-comment\">// production</span><br>  <span class=\"hljs-attr\">entry</span>: <span class=\"hljs-string\">&#x27;./src/main.js&#x27;</span>, <span class=\"hljs-comment\">// 打包的入口文件</span><br>  <span class=\"hljs-attr\">output</span>: &#123;<br>    <span class=\"hljs-attr\">filename</span>: <span class=\"hljs-string\">&#x27;bundle.js&#x27;</span>, <span class=\"hljs-comment\">// 输出的文件名称</span><br>    <span class=\"hljs-attr\">path</span>: <span class=\"hljs-title function_\">resolve</span>(__dirname, <span class=\"hljs-string\">&#x27;dist&#x27;</span>), <span class=\"hljs-comment\">// 文件输入的位置</span><br>    <span class=\"hljs-attr\">clean</span>: <span class=\"hljs-literal\">true</span> <span class=\"hljs-comment\">// 每次打包都重新创建 dist 输入的内容</span><br>  &#125;,<br>  <span class=\"hljs-attr\">module</span>: &#123;<br>    <span class=\"hljs-comment\">// loader</span><br>    <span class=\"hljs-attr\">rules</span>: []<br>  &#125;,<br>  <span class=\"hljs-attr\">plugins</span>: []<br>&#125;<br></code></pre></td></tr></table></figure></li>\n<li><p>使用 npx webpack 运行 –&gt; npx 会将 webpack 中的 .bin 临时加入环境变量，使我们可以执行那些没有全局安装的指令</p>\n</li>\n<li><p>当执行这个命令之后 webpack 会使用我们在 webpack.config.js 中的配置进行打包</p>\n</li>\n</ol>\n<h3 id=\"我们需要做些什么\"><a href=\"#我们需要做些什么\" class=\"headerlink\" title=\"我们需要做些什么\"></a>我们需要做些什么</h3><blockquote>\n<p>webpack 默认是不能处理样式、图片、html 等资源的，所以我们需要借助一系列的 loader 来帮助我们处理这些资源 –&gt; loader 的加载顺序为从下往上，从右往左</p>\n</blockquote>\n<h4 id=\"处理-CSS-文件\"><a href=\"#处理-CSS-文件\" class=\"headerlink\" title=\"处理 CSS 文件\"></a>处理 CSS 文件</h4><p>如果想让 webpack 处理 css 资源，就必须加入两个相关的 loader，css-loader 和 style-loader</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\">pnpm add -D css-loader style-loader<br></code></pre></td></tr></table></figure>\n\n<p>其中：（如下介绍都是这些 loader 的默认行为，如果需要改变默认行为请参考 <a href=\"https://webpack.js.org/loaders\">loaders</a>）</p>\n<ul>\n<li>css-loader：将 css 编译成 commonjs 模块</li>\n<li>style-loader：将 js 中的 css 通过使用多个 style 标签自动把 styles 插入到 DOM 中</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript\">mopdule.<span class=\"hljs-property\">exports</span> = &#123;<br>  ...otherConfig,<br>  <span class=\"hljs-attr\">module</span>: &#123;<br>    <span class=\"hljs-attr\">rules</span>: [<br>      &#123;<br>        <span class=\"hljs-attr\">test</span>: <span class=\"hljs-regexp\">/.css$/i</span>, <span class=\"hljs-comment\">// 正则匹配某个类型的文件</span><br>        <span class=\"hljs-attr\">use</span>: [<span class=\"hljs-string\">&#x27;style-loader&#x27;</span>, <span class=\"hljs-string\">&#x27;css-loader&#x27;</span>] <span class=\"hljs-comment\">// 对上面匹配到的文件使用哪个 loader</span><br>      &#125;<br>    ]<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p>通过如上的配置，我们就可以使用 webpack 正常的打包 css 文件了，需要注意的是，css文件必须在 js 中被引入，否则就不会被打包</p>\n<h4 id=\"使用-CSS-预处理器\"><a href=\"#使用-CSS-预处理器\" class=\"headerlink\" title=\"使用 CSS 预处理器\"></a>使用 CSS 预处理器</h4><p>在一般开发中，我们还会使用一些 css 预处理器来提升开发效率，以 less 为例：</p>\n<ul>\n<li><p>同样的 webpack 不支持我们直接使用 less 我们需要使用 less-loader 来解析我们的 less 文件</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\">pnpm add -D less-loader <span class=\"hljs-comment\"># 如果没有安装 less 的话，还需要安装 less</span><br></code></pre></td></tr></table></figure></li>\n<li><p>less-loader：将 less 编译为 css</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript\">mopdule.<span class=\"hljs-property\">exports</span> = &#123;<br>  ...otherConfig,<br>  <span class=\"hljs-attr\">module</span>: &#123;<br>    <span class=\"hljs-attr\">rules</span>: [<br>      &#123;<br>        <span class=\"hljs-attr\">test</span>: <span class=\"hljs-regexp\">/.less$/i</span>,<br>        <span class=\"hljs-attr\">use</span>: [<span class=\"hljs-string\">&#x27;style-loader&#x27;</span>, <span class=\"hljs-string\">&#x27;css-loader&#x27;</span>, <span class=\"hljs-string\">&#x27;less-loader&#x27;</span>]<br>      &#125;<br>    ]<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li>\n</ul>\n<h4 id=\"处理资源文件\"><a href=\"#处理资源文件\" class=\"headerlink\" title=\"处理资源文件\"></a>处理资源文件</h4><p>在 webpack5 中我们可以通过配置资源模块来使用资源文件，而不用配置额外的 loader</p>\n<ul>\n<li><p>资源模块的类型</p>\n<ul>\n<li>asset/resource：发送一个单独的文件并导出 URL</li>\n<li>asset/inline：导出一个资源的 data URI</li>\n<li>asset/source：导出资源的源代码</li>\n<li>asset：在导出一个 data URI 和发送一个单独的文件之间自动选择</li>\n</ul>\n</li>\n<li><p>图片资源的打包</p>\n<p>  图片资源的打包一般区别于其它资源，我们希望对小图片进行处理，将他们转化为 base64 以减少请求数量</p>\n<ul>\n<li>我们将小于 50kb 的图片转化为 base64，大于 50kb 的图片直接输出，使用 generator 配置，统一输出到 images 的目录下：</li>\n</ul>\n  <figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript\">mopdule.<span class=\"hljs-property\">exports</span> = &#123;<br>  ...otherConfig,<br>  <span class=\"hljs-attr\">module</span>: &#123;<br>    <span class=\"hljs-attr\">rules</span>: [<br>      &#123;<br>        <span class=\"hljs-attr\">test</span>: <span class=\"hljs-regexp\">/\\.(png|jpg|svg)$/i</span>,<br>        <span class=\"hljs-attr\">type</span>: <span class=\"hljs-string\">&#x27;asset&#x27;</span>,<br>        <span class=\"hljs-attr\">parser</span>: &#123;<br>          <span class=\"hljs-attr\">dataUrlCondition</span>: &#123;<br>            <span class=\"hljs-attr\">maxSize</span>: <span class=\"hljs-number\">50</span> * <span class=\"hljs-number\">1024</span> <span class=\"hljs-comment\">// 小于 50kb 会转化为 base64 --&gt; 默认为 8kb</span><br>            <span class=\"hljs-comment\">// bese64 可以减少网络请求次数，但是会提升资源体积，一般只转化小文件为 base64</span><br>          &#125;<br>        &#125;,<br>        <span class=\"hljs-comment\">// 构建配置</span><br>        <span class=\"hljs-attr\">generator</span>: &#123;<br>          <span class=\"hljs-comment\">// hash 打包后的文件名</span><br>          <span class=\"hljs-comment\">// ext 文件拓展名</span><br>          <span class=\"hljs-attr\">filename</span>: <span class=\"hljs-string\">&#x27;images/[hash][ext][query]&#x27;</span> <span class=\"hljs-comment\">// 输入文件的位置和名称</span><br>        &#125;<br>      &#125;<br>    ]<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n</li>\n<li><p>处理其它资源类型</p>\n<p>在实际的开发过程中，我们会使用多种不同类型的文件，如果我们可能希望把某几种类型的文件输出在一起，如同上面配置图片资源一样，我们可以通过配置 generator 的选项来控制</p>\n<ul>\n<li><p>首先我们需要注意 type 值的改变，比如下面我们的 ttf 和 woff 并不能被转换为 base64 所以我们在处理其他类型资源的时候一定要注意 type 的值不能写错，不然你的文件可能不会被打包到结果中</p>\n</li>\n<li><p>我们以引入 iconfont 中的字体为例，我们希望把 font 都输出到 fonts 的目录下，那么我们就可以这样写：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript\"><span class=\"hljs-variable language_\">module</span>.<span class=\"hljs-property\">exports</span> = &#123;<br>  ...otherConfig,<br>  <span class=\"hljs-attr\">module</span>: &#123;<br>    <span class=\"hljs-attr\">rules</span>: [<br>      &#123;<br>        <span class=\"hljs-attr\">test</span>: <span class=\"hljs-regexp\">/\\.(ttf|woff2?)$/</span>,<br>        <span class=\"hljs-attr\">type</span>: <span class=\"hljs-string\">&#x27;asset/resource&#x27;</span>,<br>        <span class=\"hljs-attr\">generator</span>: &#123;<br>          <span class=\"hljs-attr\">filename</span>: <span class=\"hljs-string\">&#x27;fonts/[hash][ext][query]&#x27;</span><br>        &#125;<br>      &#125;<br>    ]<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li>\n</ul>\n</li>\n</ul>\n<h4 id=\"处理-HTML-文件\"><a href=\"#处理-HTML-文件\" class=\"headerlink\" title=\"处理 HTML 文件\"></a>处理 HTML 文件</h4><p>在前面的使用中，我们都是手动引入打包后的文件，当输出文件为多个时，手动引入不仅麻烦，还极易出错，所以我们可以使用一个插件 html-webpack-plugin </p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\">pnpm add -D html-webpack-plugin<br></code></pre></td></tr></table></figure>\n\n<p>这个插件可以帮我们自动生成 html 文件，并引入相关的文件</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript\"><span class=\"hljs-keyword\">const</span> &#123; resolve &#125; = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">&#x27;path&#x27;</span>)<br><span class=\"hljs-keyword\">const</span> <span class=\"hljs-title class_\">HTMLWebpackPlugin</span> = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">&#x27;html-webpack-plugin&#x27;</span>)<br><br><span class=\"hljs-variable language_\">module</span>.<span class=\"hljs-property\">exports</span> = &#123;<br>  ...otherConfig,<br>  <span class=\"hljs-attr\">plugins</span>: [<br>    <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">HTMLWebpackPlugin</span>(&#123;<br>      <span class=\"hljs-attr\">template</span>: <span class=\"hljs-title function_\">resolve</span>(__dirname, <span class=\"hljs-string\">&#x27;public/index.html&#x27;</span>) <span class=\"hljs-comment\">// 模板</span><br>    &#125;)<br>  ]<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p>其中 template 为我们设置的基础模板</p>\n<h4 id=\"常见文件类型和路径的快捷使用\"><a href=\"#常见文件类型和路径的快捷使用\" class=\"headerlink\" title=\"常见文件类型和路径的快捷使用\"></a>常见文件类型和路径的快捷使用</h4><p>在日常的开发中，我们文件几乎都会引入其它的资源文件，他们可能分布在多个不同的文件夹中，获取需要好几层目录才能找到它们，引入他们既麻烦，还容易出错，所以我们一般都会在 webpack 中配置 resolve 选项，来帮助我们更方便的使用他们</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript\"><span class=\"hljs-keyword\">const</span> &#123; resolve &#125; = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">&#x27;path&#x27;</span>)<br><br><span class=\"hljs-variable language_\">module</span>.<span class=\"hljs-property\">exports</span> = &#123;<br>  ...otherConfig,<br>  <span class=\"hljs-attr\">resolve</span>: &#123;<br>    <span class=\"hljs-attr\">alias</span>: &#123;<br>      <span class=\"hljs-string\">&#x27;xxx&#x27;</span>: <span class=\"hljs-title function_\">resolve</span>(__dirname, <span class=\"hljs-string\">&#x27;src/xxx&#x27;</span>) <br>    &#125;,<br>    <span class=\"hljs-attr\">extensions</span>: [<span class=\"hljs-string\">&#x27;.js&#x27;</span>, <span class=\"hljs-string\">&#x27;.ts&#x27;</span>, <span class=\"hljs-string\">&#x27;.json&#x27;</span>] <span class=\"hljs-comment\">// 如果你想引入时写后缀，那么你可以使用 extensions 定义他自动查找哪些文件类型进行匹配</span><br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript\"><span class=\"hljs-keyword\">import</span> usexxx <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;xxx/xx&#x27;</span><br></code></pre></td></tr></table></figure>\n\n<p>就这样，我们无论在哪个层级都可以很方便的引入其它资源，但需要注意，xxx 不要与你使用的其它模块名称重复，resolve.alias 优先级高于其它模块解析方式，所以会让它们不生效</p>\n<h4 id=\"自动构建\"><a href=\"#自动构建\" class=\"headerlink\" title=\"自动构建\"></a>自动构建</h4><p>或许你受够了每修改一次就需要重新构建的方式，那么，我很高兴告诉你，我们可以使用 webpack-dev-server 来自动构建并更新我们的项目</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\">pnpm add -D webpack-dev-server<br></code></pre></td></tr></table></figure>\n\n<p>我们只需要简单的配置，即可使用这个美妙的功能：</p>\n<ul>\n<li><p>开发服务器</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript\"><span class=\"hljs-keyword\">const</span> &#123; resolve &#125; = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">&#x27;path&#x27;</span>)<br><br><span class=\"hljs-variable language_\">module</span>.<span class=\"hljs-property\">exports</span> = &#123;<br>  ...otherConfig,<br>  <span class=\"hljs-attr\">devServer</span>: &#123;<br>    <span class=\"hljs-attr\">host</span>: <span class=\"hljs-string\">&#x27;localhost&#x27;</span>, <span class=\"hljs-comment\">// 本地地址</span><br>    <span class=\"hljs-attr\">open</span>: <span class=\"hljs-literal\">true</span>, <span class=\"hljs-comment\">// 自动打开浏览器</span><br>    <span class=\"hljs-attr\">port</span>: <span class=\"hljs-number\">8080</span> <span class=\"hljs-comment\">// 服务端口</span><br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li>\n</ul>\n<h3 id=\"常见项目配置项\"><a href=\"#常见项目配置项\" class=\"headerlink\" title=\"常见项目配置项\"></a>常见项目配置项</h3><ul>\n<li><p>eslint</p>\n<ul>\n<li><p>安装：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\">pnpm add -D eslint eslint-webpack-plugin<br></code></pre></td></tr></table></figure></li>\n<li><p>使用：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript\"><span class=\"hljs-keyword\">const</span> <span class=\"hljs-title class_\">ESLintPlugin</span> = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">&#x27;eslint-webpack-plugin&#x27;</span>)<br><br><span class=\"hljs-variable language_\">module</span>.<span class=\"hljs-property\">exports</span> = &#123;<br>  ...otherConfig,<br>  <span class=\"hljs-attr\">plugins</span>: [<br>    <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">ESLintPlugin</span>()<br>  ]<br>&#125;<br></code></pre></td></tr></table></figure></li>\n</ul>\n</li>\n<li><p>babel –&gt; 处理 js 兼容性</p>\n<ul>\n<li><p>安装</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\">pnpm add -D babel-loader @babel/core @babel/preset-env<br></code></pre></td></tr></table></figure></li>\n<li><p>使用</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript\"><span class=\"hljs-variable language_\">module</span>.<span class=\"hljs-property\">exports</span> = &#123;<br>  ...otherConfig,<br>  <span class=\"hljs-attr\">module</span>: &#123;<br>    <span class=\"hljs-attr\">rules</span>: [<br>      &#123;<br>        <span class=\"hljs-attr\">test</span>: <span class=\"hljs-regexp\">/\\.js$/</span>,<br>        <span class=\"hljs-attr\">exclude</span>: <span class=\"hljs-regexp\">/node_modules/</span>,<br>        <span class=\"hljs-attr\">use</span>: [<span class=\"hljs-string\">&#x27;babel-loader&#x27;</span>]<br>      &#125;<br>    ]<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li>\n</ul>\n</li>\n<li><p>mini-css-extract-plugin –&gt; 本插件会将 CSS 提取到单独的文件中，为每个包含 CSS 的 JS 文件创建一个 CSS 文件，并且支持 CSS 和 SourceMaps 的按需加载</p>\n<p>在之前的使用过程中，我们会发现，我们的 css 文件是和 js 文件打包到一起的，导致我们的 js 文件非常大，导致样式加载过慢，影响用户体验，那么我们可以使用这个插件来将 css 样式分离</p>\n<ul>\n<li><p>安装</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\">pnpm add -D mini-css-extract-plugin<br></code></pre></td></tr></table></figure></li>\n<li><p>使用</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript\"><span class=\"hljs-keyword\">const</span> <span class=\"hljs-title class_\">MiniCssExtractPlugin</span> = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">&quot;mini-css-extract-plugin&quot;</span>)<br><br><span class=\"hljs-variable language_\">module</span>.<span class=\"hljs-property\">exports</span> = &#123;<br>  ...otherConfig,<br>  <span class=\"hljs-attr\">module</span>: &#123;<br>    <span class=\"hljs-attr\">rules</span>: [<br>      &#123;<br>        <span class=\"hljs-attr\">test</span>: <span class=\"hljs-regexp\">/.less$/i</span>,<br>        <span class=\"hljs-attr\">use</span>: [<span class=\"hljs-title class_\">MiniCssExtractPlugin</span>.<span class=\"hljs-property\">loader</span>, <span class=\"hljs-string\">&#x27;css-loader&#x27;</span>, <span class=\"hljs-string\">&#x27;less-loader&#x27;</span>]<br>      &#125;<br>    ]<br>  &#125;,<br>  <span class=\"hljs-attr\">plugins</span>: [<br>    <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">MiniCssExtractPlugin</span>()<br>  ]<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p>我们需要把之前的 style-loader 换成 MiniCssExtractPlugin.loader 并且在 plugins 中注册，这样再次打包，我们的 css 样式将会在 js 文件中分离出来</p>\n</li>\n</ul>\n</li>\n<li><p>postcss 处理 css 兼容性</p>\n<ul>\n<li><p>安装</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\">pnpm add -D postcss-loader postcss postcss-preset-env<br></code></pre></td></tr></table></figure></li>\n<li><p>使用</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript\"><span class=\"hljs-keyword\">const</span> <span class=\"hljs-title class_\">MiniCssExtractPlugin</span> = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">&quot;mini-css-extract-plugin&quot;</span>)<br><br>mopdule.<span class=\"hljs-property\">exports</span> = &#123;<br>  ...otherConfig,<br>  <span class=\"hljs-attr\">module</span>: &#123;<br>    <span class=\"hljs-attr\">rules</span>: [<br>      &#123;<br>        <span class=\"hljs-attr\">test</span>: <span class=\"hljs-regexp\">/.less$/i</span>,<br>        <span class=\"hljs-attr\">use</span>: [<span class=\"hljs-title class_\">MiniCssExtractPlugin</span>.<span class=\"hljs-property\">loader</span>, <span class=\"hljs-string\">&#x27;css-loader&#x27;</span>, <span class=\"hljs-string\">&#x27;postcss-loader&#x27;</span>, <span class=\"hljs-string\">&#x27;less-loader&#x27;</span>]<br>      &#125;<br>    ]<br>  &#125;,<br>  <span class=\"hljs-attr\">plugins</span>: [<br>    <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">MiniCssExtractPlugin</span>()<br>  ]<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs json\"><span class=\"hljs-comment\">// package.json</span><br><span class=\"hljs-attr\">&quot;browserslist&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-punctuation\">[</span><br>  <span class=\"hljs-string\">&quot;last 1 version&quot;</span><span class=\"hljs-punctuation\">,</span><br>  <span class=\"hljs-string\">&quot;&gt; 1%&quot;</span><span class=\"hljs-punctuation\">,</span><br>  <span class=\"hljs-string\">&quot;not dead&quot;</span><br><span class=\"hljs-punctuation\">]</span><br></code></pre></td></tr></table></figure></li>\n</ul>\n</li>\n</ul>\n"},{"title":"Canvas之旅","date":"2022-11-17T19:23:03.000Z","_content":"\n内容正在创建中...","source":"_posts/learn-canvas.md","raw":"---\ntitle: Canvas之旅\ndate: 2022-11-18 03:23:03\ntags: [HTML, Canvas]\ncategory: 前端\n---\n\n内容正在创建中...","slug":"learn-canvas","published":1,"updated":"2022-11-18T18:54:13.297Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clamwctd10002xwfg4ln90ctk","content":"<p>内容正在创建中…</p>\n","site":{"data":{}},"excerpt":"","more":"<p>内容正在创建中…</p>\n"},{"title":"React之旅","date":"2022-11-23T15:14:28.000Z","_content":"\n内容正在创建中...","source":"_posts/learn-react.md","raw":"---\ntitle: React之旅\ndate: 2022-11-23 23:14:28\ntags: [React]\ncategory: 前端\n---\n\n内容正在创建中...","slug":"learn-react","published":1,"updated":"2022-11-23T15:19:27.521Z","comments":1,"layout":"post","photos":[],"link":"","_id":"claxazt0w000058fg2smpfkor","content":"<p>内容正在创建中…</p>\n","site":{"data":{}},"excerpt":"","more":"<p>内容正在创建中…</p>\n"},{"title":"2022-11-27日志","date":"2022-11-27T08:33:11.000Z","_content":"\n最近情绪有些低落，在做一些事之前突然开始都有了期许，但是我们都知道有的事情，它不可能有我们期望的结果或者任何正反馈。\n\n整理一下心情吧！\n\n一切都还好，就像以前一样，不去期望就不会失望。\n","source":"_posts/note-2022-11-27.md","raw":"---\ntitle: 2022-11-27日志\ndate: 2022-11-27 16:33:11\ntags: [心情日志]\ncategory: 闲聊\n---\n\n最近情绪有些低落，在做一些事之前突然开始都有了期许，但是我们都知道有的事情，它不可能有我们期望的结果或者任何正反馈。\n\n整理一下心情吧！\n\n一切都还好，就像以前一样，不去期望就不会失望。\n","slug":"note-2022-11-27","published":1,"updated":"2022-11-27T08:51:56.350Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clb0mkklq0000igfgeed1a8ef","content":"<p>最近情绪有些低落，在做一些事之前突然开始都有了期许，但是我们都知道有的事情，它不可能有我们期望的结果或者任何正反馈。</p>\n<p>整理一下心情吧！</p>\n<p>一切都还好，就像以前一样，不去期望就不会失望。</p>\n","site":{"data":{}},"excerpt":"","more":"<p>最近情绪有些低落，在做一些事之前突然开始都有了期许，但是我们都知道有的事情，它不可能有我们期望的结果或者任何正反馈。</p>\n<p>整理一下心情吧！</p>\n<p>一切都还好，就像以前一样，不去期望就不会失望。</p>\n"},{"title":"2022-12-23日志","date":"2022-12-23T13:03:57.000Z","_content":"\n有时候你可能连对人家好的资格都没有...\n","source":"_posts/note-2022-12-23.md","raw":"---\ntitle: 2022-12-23日志\ndate: 2022-12-23 21:03:57\ntags: [心情日志]\ncategory: 闲聊\n---\n\n有时候你可能连对人家好的资格都没有...\n","slug":"note-2022-12-23","published":1,"updated":"2022-12-23T13:07:08.376Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clc0j1wwh0000scfg53y0c3h1","content":"<p>有时候你可能连对人家好的资格都没有…</p>\n","site":{"data":{}},"excerpt":"","more":"<p>有时候你可能连对人家好的资格都没有…</p>\n"}],"PostAsset":[],"PostCategory":[{"post_id":"cl9pm0yj50000bgfg33w4f2d5","category_id":"cl9pm0yj80001bgfg800jhznb","_id":"cl9pm0yjb0004bgfgb34l2lnw"},{"post_id":"cl9pnl76f000064fg5at21j3i","category_id":"cl9pm0yj80001bgfg800jhznb","_id":"cl9pnl76h000264fg3dfq8ij1"},{"post_id":"cl9pnl76r000664fge2pnaaom","category_id":"cl9pm0yj80001bgfg800jhznb","_id":"cl9pnl76s000864fgbhhx0i73"},{"post_id":"cl9pwc65n0000f4fgc5un5g06","category_id":"cl9pm0yj80001bgfg800jhznb","_id":"cl9pwc65r0005f4fg5fm8a2b2"},{"post_id":"cl9pwc65o0001f4fg14q9gaxk","category_id":"cl9pm0yj80001bgfg800jhznb","_id":"cl9pwc65s0008f4fg6x9i6ppz"},{"post_id":"cl9pwc65q0003f4fg87hx61nc","category_id":"cl9pm0yj80001bgfg800jhznb","_id":"cl9pwc65t000af4fg4qr7hwrm"},{"post_id":"clamwctcx0000xwfg6yajaj7r","category_id":"cl9pm0yj80001bgfg800jhznb","_id":"clamwctd20003xwfgg3yxb416"},{"post_id":"clamwctd10002xwfg4ln90ctk","category_id":"cl9pm0yj80001bgfg800jhznb","_id":"clamwctd30006xwfg6nribez6"},{"post_id":"claxazt0w000058fg2smpfkor","category_id":"cl9pm0yj80001bgfg800jhznb","_id":"claxazt12000258fg2f2sdm71"},{"post_id":"clb0mkklq0000igfgeed1a8ef","category_id":"clb0mkkls0001igfgerdf7f8f","_id":"clb0mkklv0004igfg86l82g10"},{"post_id":"clc0j1wwh0000scfg53y0c3h1","category_id":"clb0mkkls0001igfgerdf7f8f","_id":"clc0j1wwi0002scfg4eoz83gi"}],"PostTag":[{"post_id":"cl9pm0yj50000bgfg33w4f2d5","tag_id":"cl9pnl76g000164fg8gow1k6t","_id":"cl9pnl76j000464fgg7068pnu"},{"post_id":"cl9pnl76f000064fg5at21j3i","tag_id":"cl9pnl76g000164fg8gow1k6t","_id":"cl9pnl76j000564fg92lrfkdp"},{"post_id":"cl9pnl76r000664fge2pnaaom","tag_id":"cl9pnl76g000164fg8gow1k6t","_id":"cl9pnl76r000764fg31wgav0x"},{"post_id":"cl9pwc65o0001f4fg14q9gaxk","tag_id":"cl9pnl76g000164fg8gow1k6t","_id":"cl9pwc65r0004f4fge6ia3fr8"},{"post_id":"cl9pwc65q0003f4fg87hx61nc","tag_id":"cl9pnl76g000164fg8gow1k6t","_id":"cl9pwc65s0006f4fg6gm88cqq"},{"post_id":"cl9pwc65n0000f4fgc5un5g06","tag_id":"cl9pwc65o0002f4fggucg3ewl","_id":"cl9pwc65t000df4fg7wjjgf72"},{"post_id":"cl9pwc65n0000f4fgc5un5g06","tag_id":"cl9pwc65s0009f4fg8v2o0wse","_id":"cl9pwc65t000ef4fg8x7g22yx"},{"post_id":"clamwctcx0000xwfg6yajaj7r","tag_id":"cl9pnl76g000164fg8gow1k6t","_id":"clamwctd20005xwfg8m4w5pg5"},{"post_id":"clamwctcx0000xwfg6yajaj7r","tag_id":"clamwctcz0001xwfg70rn0ede","_id":"clamwctd30007xwfg1xrv951b"},{"post_id":"clamwctd10002xwfg4ln90ctk","tag_id":"cl9pwc65s0009f4fg8v2o0wse","_id":"clamwctd30008xwfgdy996307"},{"post_id":"clamwctd10002xwfg4ln90ctk","tag_id":"clamwctd20004xwfgbm9pb27n","_id":"clamwctd30009xwfgcpn8h4ch"},{"post_id":"claxazt0w000058fg2smpfkor","tag_id":"claxazt10000158fg1fru12m6","_id":"claxazt12000358fgaz0jamwp"},{"post_id":"clb0mkklq0000igfgeed1a8ef","tag_id":"clb0mkklu0002igfgcvvz3g35","_id":"clb0mkklu0003igfg66fv46y5"},{"post_id":"clc0j1wwh0000scfg53y0c3h1","tag_id":"clb0mkklu0002igfgcvvz3g35","_id":"clc0j1wwi0001scfgeinhbeio"}],"Tag":[{"name":"test","_id":"cl9pjndnv0001akfg9kc8h9pk"},{"name":"javascript","_id":"cl9pm0yja0002bgfgc6fo2jif"},{"name":"JavaScript","_id":"cl9pnl76g000164fg8gow1k6t"},{"name":"CSS","_id":"cl9pwc65o0002f4fggucg3ewl"},{"name":"HTML","_id":"cl9pwc65s0009f4fg8v2o0wse"},{"name":"Vue","_id":"cl9pwc65t000bf4fg6k3k5obi"},{"name":"Git","_id":"cl9qg7iyj0002n0w50dfvcgb6"},{"name":"flag","_id":"clakk2bh400022wfg31sacvnm"},{"name":"闲聊","_id":"clakk2bh400032wfgaa9i0pmo"},{"name":"Webpack","_id":"clamwctcz0001xwfg70rn0ede"},{"name":"Canvas","_id":"clamwctd20004xwfgbm9pb27n"},{"name":"React","_id":"claxazt10000158fg1fru12m6"},{"name":"心情日志","_id":"clb0mkklu0002igfgcvvz3g35"}]}}